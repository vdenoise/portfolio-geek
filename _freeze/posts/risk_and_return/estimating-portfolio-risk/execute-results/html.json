{
  "hash": "7b9c8161efecbea9962cf6661a043358",
  "result": {
    "markdown": "---\ntitle: Estimate Financial Risk\ntoc: false\nbadges: true\ncomments: false\nauthor: Vincent D.\ncategories: [data-gathering]\n---\n\n![](/pictures/laptop-data.png)\n## Introduction\nIn today's session, we will \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\n#import pandas_datareader as web_reader\nfrom pandas_datareader import data as pdr\nimport yfinance as yf\n\n\nimport matplotx\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nimport math\nimport seaborn as sns\n\ntickers = ['SPY']\n\nstart_date = '2018-09-14'\nend_date = '2022-09-14'\ntickers = ['SPY', 'AGG']\n#yf.pdr_override(tickers)\ndf = yf.download(tickers,  start=start_date, end=end_date)\ndata = df.Close.SPY.resample(\"B\").last().fillna(method=\"bfill\")\ndata_agg = df.Close.AGG.resample(\"B\").last().fillna(method=\"bfill\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r[                       0%                       ]\r[*********************100%***********************]  2 of 2 completed\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n:::\n\n\n## Plot Historical Close Price\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntpl_path = \"https://github.com/vdenoise/templates/raw/master\"\nmpl_tpl_path = f\"{tpl_path}/matplotlib\"\n\nplt.style.use(f\"{mpl_tpl_path}/dracula_slide.mplstyle\")\ndata.resample(\"W\").last().plot(figsize=(4,6));\nplt.ylabel(\"Wealth Curve\")  \nmatplotx.line_labels()  \n\nplt.savefig(\"output/wealth_curve_spy.png\" );\n```\n\n::: {.cell-output .cell-output-display}\n![](estimating-portfolio-risk_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n## Plot Historical Returns\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\ndata_bar = data.resample(\"W\").last().pct_change().multiply(100)\nindex = data_bar.index\nindex = [pd.to_datetime(date, format='%Y-%m-%d').date() for date in index]\ndata_bar.index = index\nax = data_bar.plot.bar()\nplt.ylabel(\"Weekly Return (%)\")\nax.xaxis.set_major_locator(mdates.MonthLocator(interval=3))\nplt.gcf().autofmt_xdate()\nplt.savefig(\"output/weekly_returns_spy.png\" );\n```\n\n::: {.cell-output .cell-output-display}\n![](estimating-portfolio-risk_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n## Sorted Weekly Returns\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsorted_returns = data.resample(\"W\").last().pct_change().multiply(100).sort_values()\nsorted_returns.plot(figsize=(8, 6));\nplt.savefig(\"output/sorted_weekly_returns_spy.png\" );\n```\n\n::: {.cell-output .cell-output-display}\n![](estimating-portfolio-risk_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n## Return Distribution\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndata_bar.hist(bins=100, figsize=(8,6));\n```\n\n::: {.cell-output .cell-output-display}\n![](estimating-portfolio-risk_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nax = sns.kdeplot(data_bar)\nmean = data_bar.mean()\nstd = data_bar.std()\nN = 10\nfor i in [1, 2, 3]:\n    x1 = np.linspace(mean - i*std, mean - (i - 1)*std, N)\n    x2 = np.linspace(mean - (i - 1)*std, mean + (i - 1)*std, N)\n    x3 = np.linspace(mean + (i - 1)*std, mean + i*std, N)\n    x = np.concatenate((x1, x2, x3))\n    x = np.where((mean - (i - 1)*std < x) & (x < mean + (i - 1)*std), np.nan, x)\n    y = norm.pdf(x, mean, std)\n    ax.fill_between(x, y, alpha=0.5)\n\nplt.xlabel(\"SPY Weekly Returns (in %, US Dollar)\")\nplt.ylabel(\"Probability Density Function\")\n#plt.xticks(ticks=range(0, 10))\nplt.grid()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](estimating-portfolio-risk_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n## Historical Volatility \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nplt.savefig(\"output/wealth_curve_spy.png\" );\ndata.resample(\"W\").last().pct_change().rolling(52).std().multiply(math.sqrt(52)).plot(secondary_y=True)\nmatplotx.line_labels() \nplt.savefig(\"output/wealth_curve_spy_with_vol.png\" );\n```\n\n::: {.cell-output .cell-output-display}\n![](estimating-portfolio-risk_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\ndata.resample(\"W\").last().pct_change().rolling(52).std().multiply(math.sqrt(52)).plot(secondary_y=False)\nmatplotx.line_labels()\nplt.savefig(\"output/vol_spy.png\" );\ndata_agg.resample(\"W\").last().pct_change().rolling(52).std().multiply(math.sqrt(52)).plot(secondary_y=False)\nmatplotx.line_labels()\nplt.savefig(\"output/vol_spy_with_agg.png\" );\n\n```\n\n::: {.cell-output .cell-output-display}\n![](estimating-portfolio-risk_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n\n",
    "supporting": [
      "estimating-portfolio-risk_files"
    ],
    "filters": [],
    "includes": {}
  }
}