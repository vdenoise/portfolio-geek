{
  "hash": "e19030a42e12e300009fa62cef4144b6",
  "result": {
    "markdown": "---\ntitle: Setting up a python development workstation\ncategories: [101, en]\ndate: \"04/06/2023\"\n---\n\n![](/pictures/high-tech-programming-office-with-workstations.png)\n\n# Setting Up Your Python Financial Analysis Lab: A Comprehensive Guide\n\n## Introduction\n\nHello there, finance wizards and coding enthusiasts! Ready to enter the world of Python, Visual Studio, and financial analysis? Let's embark on this journey together. By the end of this guide, you'll have your finance lab primed for dissecting market trends, optimising portfolios, and much more. Buckle up, let's set sail!\n\n## 1. Setting Up Visual Studio and Miniconda\n\nYour coding adventure begins by setting up the primary tools of the trade: Visual Studio Code (VS Code) and Miniconda. VS Code is a robust and versatile code editor, while Miniconda, a mini version of Anaconda, allows us to create isolated Python environments and manage packages.\n\n* Download and install Visual Studio Code from the [official website](https://code.visualstudio.com/). Follow the prompts to complete the installation process.\n\n* Similarly, download and install Miniconda from the [official website](https://docs.conda.io/en/latest/miniconda.html). During installation, ensure that you select the option to \"Add Miniconda to my PATH environment variable\". This allows you to use `conda` commands directly in the VS Code terminal.\n\n## 2. Setting Up a Python Virtual Environment\n\nWith our tools installed, let's now create a virtual environment to house our finance lab. We'll use conda to create a new environment named `finlab` using Python 3.10.\n\nOpen VS Code, then open a terminal (Ctrl + `) and type the following command:\n\n```bash\nconda create -n finlab python=3.10\n```\n\nActivate the `finlab` environment by typing:\n\n```bash\nconda activate finlab\n```\n\nInside `finlab`, we install several vital Python libraries for our financial analysis journey:\n\n* **pandas**: A flexible and powerful data manipulation library, essential for handling and processing financial data.\n\n* **matplotlib and seaborn**: Two formidable libraries for data visualisation, because finance isn't just about numbers—it's about insightful charts too!\n\n* **yfinance**: An effective library for fetching historical stock data from Yahoo Finance. \n\n* **pyportfolioopt**: An advanced library designed to optimise portfolios, calculate risk and returns, and much more.\n\nInstall these libraries using the following command:\n\n```bash\nconda install pandas matplotlib seaborn yfinance pyportfolioopt\n```\n\n## 3. Installing Key Visual Studio Extensions\n\nVS Code shines with its extensions. Here are a few that will make your life easier:\n\n* **Python**: Gives you a host of Python-specific features like linting, debugging, code formatting, and more.\n\n* **Prettier**: A code formatter that supports many languages, including Python. Keeps your code clean and professional.\n\n* **Code Spell Checker**: Like a proof-reader, it catches common spelling mistakes in your code.\n\nYou can install these extensions by searching for them in the VS Code Extensions view (`Ctrl + Shift + X`) and clicking on \"Install\".\n\n## 4. Launching a Jupyter Notebook Inside Visual Studio\n\nWith our `finlab` environment and VS Code set up, it's time to dive into some coding. We'll be using a Jupyter Notebook, a powerful tool allowing you to interweave code and text into a single document.\n\nCreate a new file with a `.ipynb` extension. Upon creation, VS Code will prompt you to select a Python interpreter—choose the one corresponding to our `finlab` environment.\n\nIn the following steps, we'll demonstrate some powerful features of the `pyportfolioopt` library. In this exercise, we'll fetch the historical data of SPY, QQQ, and AGG ETFs using `yfinance`, compute risk and\n\n return metrics, plot the 10-year cumulative return, and finally, plot the efficient frontier.\n\n*Due to the length and complexity of the code, it has been omitted from this article. For a complete walkthrough, please refer to the official pyportfolioopt [documentation](https://pyportfolioopt.readthedocs.io/en/latest/).*\n\n\n## Gather the historical data of SPY, QQQ, and AGG ETFs using yfinance\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n%%capture\nimport yfinance as yf\nimport pandas as pd\n\n# Define the ticker list\ntickers = ['SPY', 'QQQ', 'AGG']\n\n# Use yfinance to download the historical market data\ndata = yf.download(tickers, start=\"2013-06-28\", end=\"2023-06-28\")['Adj Close']\n\n```\n:::\n\n\n## Compute the key risk and return metrics for each ETF\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Calculate the annualized return\nreturns = data.pct_change().mean() * 252\n\n# Calculate the annualized volatility\nvolatility = data.pct_change().std() * (252**0.5)\n\n# Print the results\nprint(\"Annualized Return:\")\nprint(returns)\nprint(\"\\nAnnualized Volatility:\")\nprint(volatility)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnnualized Return:\nAGG    0.016396\nQQQ    0.195212\nSPY    0.133962\ndtype: float64\n\nAnnualized Volatility:\nAGG    0.048848\nQQQ    0.213633\nSPY    0.174720\ndtype: float64\n```\n:::\n:::\n\n\n## Plot the 10-year cumulated return as a line chart for the 3 ETFs, with the initial value normalized to 100.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Calculate the cumulated return\ncum_return = (1 + data.pct_change()).dropna().cumprod()\n\n# Normalize to 100\ncum_return = 100 * cum_return / cum_return.iloc[0]\n\n# Plot the data\nplt.figure(figsize=(12,8))\ncum_return.plot();\n\nplt.xlabel('Date')\nplt.ylabel('Cumulative Returns')\nplt.title('10-Year Cumulated Returns')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1152x768 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](setting-up-a-python-workstation_files/figure-html/cell-4-output-2.png){width=593 height=421}\n:::\n:::\n\n\n## Use pyportfolioopt to calculate and plot the efficiency frontier\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom pypfopt import expected_returns, risk_models\nfrom pypfopt import plotting\nfrom pypfopt.efficient_frontier import EfficientFrontier\n\n# Calculate expected returns and the covariance matrix\nmu = expected_returns.mean_historical_return(data)\nS = risk_models.sample_cov(data)\n\n# Optimize for the maximal Sharpe ratio\nef = EfficientFrontier(mu, S,weight_bounds=(None, None))\n\n# Plot the efficient frontier\nfig, ax = plt.subplots()\nplotting.plot_efficient_frontier(ef, ax=ax, show_assets=True)\n\nplt.title('Efficient Frontier')\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](setting-up-a-python-workstation_files/figure-html/cell-5-output-1.png){width=662 height=490}\n:::\n:::\n\n\n## Key Considerations for this Job\n\nIn the world of financial analysis, always ensure you understand the data you're dealing with and the calculations you're performing. Never hesitate to go beyond the libraries and tools used here—Python has a vast ecosystem, and there's always more to learn!\n\nRemember, coding and financial analysis are both iterative processes. Keep refining your skills and knowledge, and soon you'll be slicing and dicing financial data like a pro.\n\n**Keywords:** Python, Finance, Financial Analysis, Visual Studio Code, Miniconda, Virtual Environment, pandas, matplotlib, seaborn, yfinance, pyportfolioopt, Jupyter Notebook, Portfolio Optimisation, Risk Metrics, Return Metrics, Efficient Frontier, ETFs.\n\n",
    "supporting": [
      "setting-up-a-python-workstation_files"
    ],
    "filters": [],
    "includes": {}
  }
}