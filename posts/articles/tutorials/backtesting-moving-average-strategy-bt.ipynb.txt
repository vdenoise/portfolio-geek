{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Backtesting a Moving Average Crossover Strategy with SPY\n",
        "\n",
        "Understanding backtesting and moving averages is crucial in the world of trading and investments. Here, we will guide you through a straightforward yet effective strategy based on the crossings of the 21-day and 100-day moving averages using the `bt` library in Python. This knowledge will empower you to analyze potential buy and sell signals by exploring historical price movements. \n",
        "\n",
        "Let's embark on this journey to create a moving average crossover strategy and backtest it using real market data!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Section 1: Importance of Moving Average Strategies\n",
        "\n",
        "Moving averages (MA) help smooth out price data across a specific time frame, making it easier to identify trends. A crossover strategy involves observing the relationship between a short-term MA and a long-term one, producing actionable trading signals. In this section, we will outline essential concepts, key formulas, and their implications in the context of trading SPY.\n",
        "\n",
        "### Key Concepts\n",
        "\n",
        "1. **Simple Moving Average (SMA)**\n",
        "   - The average of data points over a specified period. It's calculated by summing closing prices over the period and dividing by the number of prices.\n",
        "\n",
        "2. **Crossover Signal**\n",
        "   - A buy signal occurs when the short-term moving average crosses above the long-term moving average, while a sell signal is generated when it crosses below.\n",
        "\n",
        "3. **Parameters Impact**\n",
        "   - The selection of moving average lengths will significantly impact strategy performance. Shorter MAs may produce more signals but can lead to whipsaws, while longer MAs smooth out the noise."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Section 2: Key Formulae and Their Implications\n",
        "\n",
        "To implement the crossover strategy effectively, understanding the calculation of the moving averages is crucial. The SMA is defined as follows:\n",
        "\n",
        "### Formula for Simple Moving Average (SMA)\n",
        "\n",
        "$$ SMA = \\frac{\\sum_{i=1}^{n} P_i}{n} $$\n",
        "\n",
        "Where:\n",
        "- $P_i$ is the price at time i.\n",
        "- n is the total number of periods.\n",
        "\n",
        "### Practical Application\n",
        "\n",
        "By comparing different moving average lengths and evaluating crossovers, one can optimize their strategy. Experimenting with the parameters can show different performance outcomes and volatility measures."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Section 3: Visualisation Charts\n",
        "Creating clear visual representations can greatly enhance understanding. Here, we will implement several charts that elucidate key aspects of the trading strategy. \n",
        "\n",
        "### Chart 1: SPY Historical Daily Closing Prices\n",
        "This chart displays the historical daily closing prices of SPY over the past five years, providing context for any moving average analysis.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[*********************100%%**********************]  1 of 1 completed\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 576x216 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "spy_data = yf.download('SPY', start='2019-01-01', end='2024-01-01').dropna()\n",
        "plt.style.use('getting_started-chart.mplstyle')\n",
        "fig, ax = plt.subplots()\n",
        "spy_data['Adj Close'].plot(ax=ax, title='SPY Historical Daily Closing Prices')\n",
        "ax.set_xlabel('Date')\n",
        "ax.set_ylabel('Price')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Chart 2: SPY Closing Prices with 21-Day and 100-Day Moving Averages\n",
        "By overlaying the moving averages on the SPY closing prices, we can visualize potential crossover points that signal trades.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 576x216 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "spy_data['21_MA'] = spy_data['Adj Close'].rolling(window=21).mean()\n",
        "spy_data['100_MA'] = spy_data['Adj Close'].rolling(window=100).mean()\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "spy_data[['Adj Close', '21_MA', '100_MA']].plot(ax=ax, title='SPY Closing Prices with 21-Day and 100-Day Moving Averages')\n",
        "ax.set_xlabel('Date')\n",
        "ax.set_ylabel('Price')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Chart 3: SPY Daily Trading Volume\n",
        "Analyzing trading volume can provide insights into market participation and liquidity, especially around crossover events.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 576x216 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "spy_data['Volume'].plot(ax=ax, kind='bar', title='SPY Daily Trading Volume')\n",
        "ax.set_xlabel('Date')\n",
        "ax.set_ylabel('Volume')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Chart 4: Cumulative Returns of the Strategy\n",
        "Visualizing cumulative returns allows us to compare the performance of the crossover strategy against simply holding SPY. \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/pm/cq1rc4217fzf1sww8bpsq2rh0000gn/T/ipykernel_27181/2702811287.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  spy_data['Signal'][100:] = np.where(spy_data['21_MA'][100:] > spy_data['100_MA'][100:], 1, -1)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                           Open        High         Low       Close  \\\n",
            "Date                                                                  \n",
            "2019-01-02 00:00:00  245.979996  251.210007  245.949997  250.179993   \n",
            "2019-01-03 00:00:00  248.229996  248.570007  243.669998  244.210007   \n",
            "2019-01-04 00:00:00  247.589996  253.110001  247.169998  252.389999   \n",
            "2019-01-07 00:00:00  252.690002  255.949997  251.690002  254.380005   \n",
            "2019-01-08 00:00:00  256.820007  257.309998  254.000000  256.769989   \n",
            "...                         ...         ...         ...         ...   \n",
            "2023-12-26 00:00:00  474.070007  476.579987  473.989990  475.649994   \n",
            "2023-12-27 00:00:00  475.440002  476.660004  474.890015  476.510010   \n",
            "2023-12-28 00:00:00  476.880005  477.549988  476.260010  476.690002   \n",
            "2023-12-29 00:00:00  476.489990  477.029999  473.299988  475.309998   \n",
            "Signal                      NaN         NaN         NaN         NaN   \n",
            "\n",
            "                      Adj Close       Volume       21_MA      100_MA  Signal  \\\n",
            "Date                                                                           \n",
            "2019-01-02 00:00:00  229.104202  126925200.0         NaN         NaN       0   \n",
            "2019-01-03 00:00:00  223.637115  144140700.0         NaN         NaN       0   \n",
            "2019-01-04 00:00:00  231.128006  142628800.0         NaN         NaN       0   \n",
            "2019-01-07 00:00:00  232.950394  103139100.0         NaN         NaN       0   \n",
            "2019-01-08 00:00:00  235.139038  102512600.0         NaN         NaN       0   \n",
            "...                         ...          ...         ...         ...     ...   \n",
            "2023-12-26 00:00:00  472.651886   55387000.0  459.703876  438.229426       1   \n",
            "2023-12-27 00:00:00  473.506500   68000300.0  460.833153  438.558026       1   \n",
            "2023-12-28 00:00:00  473.685333   77158100.0  461.949738  438.849953       1   \n",
            "2023-12-29 00:00:00  472.314026  122234100.0  463.016105  439.147495       1   \n",
            "Signal                      NaN          NaN         NaN         NaN      -1   \n",
            "\n",
            "                     Position  \n",
            "Date                           \n",
            "2019-01-02 00:00:00       NaN  \n",
            "2019-01-03 00:00:00       0.0  \n",
            "2019-01-04 00:00:00       0.0  \n",
            "2019-01-07 00:00:00       0.0  \n",
            "2019-01-08 00:00:00       0.0  \n",
            "...                       ...  \n",
            "2023-12-26 00:00:00       0.0  \n",
            "2023-12-27 00:00:00       0.0  \n",
            "2023-12-28 00:00:00       0.0  \n",
            "2023-12-29 00:00:00       0.0  \n",
            "Signal                   -2.0  \n",
            "\n",
            "[1259 rows x 10 columns]\n",
            "                     weights\n",
            "Date                        \n",
            "2019-01-02 00:00:00      0.0\n",
            "2019-01-03 00:00:00      0.0\n",
            "2019-01-04 00:00:00      0.0\n",
            "2019-01-07 00:00:00      0.0\n",
            "2019-01-08 00:00:00      0.0\n",
            "...                      ...\n",
            "2023-12-26 00:00:00      1.0\n",
            "2023-12-27 00:00:00      1.0\n",
            "2023-12-28 00:00:00      1.0\n",
            "2023-12-29 00:00:00      1.0\n",
            "Signal                   1.0\n",
            "\n",
            "[1259 rows x 1 columns]\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  0%|          | 0/1 [00:00<?, ?it/s]\n"
          ]
        },
        {
          "ename": "Exception",
          "evalue": "Cannot allocate capital to weights because price is 0 as of 2019-05-29 00:00:00",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "Input \u001b[0;32mIn [23]\u001b[0m, in \u001b[0;36m<cell line: 28>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m sma_crossover \u001b[38;5;241m=\u001b[39m bt\u001b[38;5;241m.\u001b[39mStrategy(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSMA_Crossover\u001b[39m\u001b[38;5;124m'\u001b[39m, [WeighTarget(target_weights), bt\u001b[38;5;241m.\u001b[39malgos\u001b[38;5;241m.\u001b[39mRebalance()])\n\u001b[1;32m     27\u001b[0m backtest \u001b[38;5;241m=\u001b[39m bt\u001b[38;5;241m.\u001b[39mBacktest(sma_crossover, spy_data[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAdj Close\u001b[39m\u001b[38;5;124m'\u001b[39m]])\n\u001b[0;32m---> 28\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[43mbt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbacktest\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     30\u001b[0m \u001b[38;5;66;03m# Plot cumulative returns\u001b[39;00m\n\u001b[1;32m     31\u001b[0m fig, ax \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots()\n",
            "File \u001b[0;32m/usr/local/Caskroom/miniconda/base/envs/portfolio-geek/lib/python3.9/site-packages/bt/backtest.py:30\u001b[0m, in \u001b[0;36mrun\u001b[0;34m(*backtests)\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[38;5;66;03m# run each backtest\u001b[39;00m\n\u001b[1;32m     29\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m bkt \u001b[38;5;129;01min\u001b[39;00m tqdm(backtests):\n\u001b[0;32m---> 30\u001b[0m     \u001b[43mbkt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     32\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m Result(\u001b[38;5;241m*\u001b[39mbacktests)\n",
            "File \u001b[0;32m/usr/local/Caskroom/miniconda/base/envs/portfolio-geek/lib/python3.9/site-packages/bt/backtest.py:252\u001b[0m, in \u001b[0;36mBacktest.run\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    249\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrategy\u001b[38;5;241m.\u001b[39mupdate(dt)\n\u001b[1;32m    251\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrategy\u001b[38;5;241m.\u001b[39mbankrupt:\n\u001b[0;32m--> 252\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstrategy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    253\u001b[0m     \u001b[38;5;66;03m# need update after to save weights, values and such\u001b[39;00m\n\u001b[1;32m    254\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrategy\u001b[38;5;241m.\u001b[39mupdate(dt)\n",
            "File \u001b[0;32m/usr/local/Caskroom/miniconda/base/envs/portfolio-geek/lib/python3.9/site-packages/bt/core.py:2062\u001b[0m, in \u001b[0;36mbt.core.Strategy.run\u001b[0;34m()\u001b[0m\n",
            "File \u001b[0;32m/usr/local/Caskroom/miniconda/base/envs/portfolio-geek/lib/python3.9/site-packages/bt/core.py:2002\u001b[0m, in \u001b[0;36mbt.core.AlgoStack.__call__\u001b[0;34m()\u001b[0m\n",
            "File \u001b[0;32m/usr/local/Caskroom/miniconda/base/envs/portfolio-geek/lib/python3.9/site-packages/bt/algos.py:1755\u001b[0m, in \u001b[0;36mRebalance.__call__\u001b[0;34m(self, target)\u001b[0m\n\u001b[1;32m   1753\u001b[0m \u001b[38;5;66;03m# Turn off updating while we rebalance each child\u001b[39;00m\n\u001b[1;32m   1754\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m item \u001b[38;5;129;01min\u001b[39;00m targets\u001b[38;5;241m.\u001b[39mitems():\n\u001b[0;32m-> 1755\u001b[0m     \u001b[43mtarget\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrebalance\u001b[49m\u001b[43m(\u001b[49m\u001b[43mitem\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mchild\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mitem\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbase\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mupdate\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m   1757\u001b[0m \u001b[38;5;66;03m# Now update\u001b[39;00m\n\u001b[1;32m   1758\u001b[0m target\u001b[38;5;241m.\u001b[39mroot\u001b[38;5;241m.\u001b[39mupdate(target\u001b[38;5;241m.\u001b[39mnow)\n",
            "File \u001b[0;32m/usr/local/Caskroom/miniconda/base/envs/portfolio-geek/lib/python3.9/site-packages/bt/core.py:1011\u001b[0m, in \u001b[0;36mbt.core.StrategyBase.rebalance\u001b[0;34m()\u001b[0m\n",
            "File \u001b[0;32m/usr/local/Caskroom/miniconda/base/envs/portfolio-geek/lib/python3.9/site-packages/bt/core.py:1488\u001b[0m, in \u001b[0;36mbt.core.SecurityBase.allocate\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: Cannot allocate capital to weights because price is 0 as of 2019-05-29 00:00:00"
          ]
        }
      ],
      "source": [
        "import bt\n",
        "import numpy as np\n",
        "\n",
        "# Implement logic to identify moving average crossovers\n",
        "spy_data['Signal'] = 0\n",
        "spy_data['Signal'][100:] = np.where(spy_data['21_MA'][100:] > spy_data['100_MA'][100:], 1, -1)\n",
        "spy_data['Position'] = spy_data['Signal'].diff()\n",
        "print(spy_data)\n",
        "\n",
        "# Create target weights based on crossovers\n",
        "target_weights = spy_data[['Signal']].shift(1)\n",
        "target_weights.columns = ['weights']\n",
        "target_weights['weights'][0:99] = 0\n",
        "print(target_weights)\n",
        "\n",
        "# Run the backtest\n",
        "class WeighTarget(bt.Algo):\n",
        "    def __init__(self, target_weights):\n",
        "        self.tw = target_weights\n",
        "    def __call__(self, target):\n",
        "        if target.now in self.tw.index:\n",
        "            w = self.tw.loc[target.now]\n",
        "            target.temp['weights'] = w.dropna()\n",
        "        return True\n",
        "\n",
        "sma_crossover = bt.Strategy('SMA_Crossover', [WeighTarget(target_weights), bt.algos.Rebalance()])\n",
        "backtest = bt.Backtest(sma_crossover, spy_data[['Adj Close']])\n",
        "result = bt.run(backtest)\n",
        "\n",
        "# Plot cumulative returns\n",
        "fig, ax = plt.subplots()\n",
        "result.plot(ax=ax, title='Cumulative Returns of SMA Crossover Strategy vs SPY')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Section 4: Comprehensive Strategy Backtesting Code\n",
        "In this section, we detail all the steps and code provided earlier to solidify your understanding while demonstrating the complete strategy.\n",
        "\n",
        "# Full Backtest Implementation\n",
        "\n",
        "# Import required libraries\n",
        "import bt\n",
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Fetch historical SPY data\n",
        "spy_data = yf.download('SPY', start='2017-01-01', end='2022-01-01')\n",
        "plt.style.use('getting_started-chart.mplstyle')\n",
        "\n",
        "# Calculate moving averages\n",
        "spy_data['21_MA'] = spy_data['Adj Close'].rolling(window=21).mean()\n",
        "spy_data['100_MA'] = spy_data['Adj Close'].rolling(window=100).mean()\n",
        "\n",
        "# Assume previous plotting steps here...\n",
        "\n",
        "# Implement strategy based on crossovers\n",
        "spy_data['Signal'] = 0\n",
        "spy_data['Signal'][21:] = np.where(spy_data['21_MA'][21:] > spy_data['100_MA'][21:], 1, -1)\n",
        "spy_data['Position'] = spy_data['Signal'].diff()\n",
        "\n",
        "# Backtesting\n",
        "target_weights = spy_data[['Signal']]\n",
        "target_weights.columns = ['weights']\n",
        "target_weights['weights'] = target_weights['weights'].shift(1)\n",
        "target_weights['weights'][0:21] = 0\n",
        "\n",
        "# Define strategy\n",
        "class WeighTarget(bt.Algo):\n",
        "    def __init__(self, target_weights):\n",
        "        self.tw = target_weights\n",
        "    def __call__(self, target):\n",
        "        if target.now in self.tw.index:\n",
        "            w = self.tw.loc[target.now]\n",
        "            target.temp['weights'] = w.dropna()\n",
        "        return True\n",
        "\n",
        "sma_crossover = bt.Strategy('SMA_Crossover', [WeighTarget(target_weights), bt.algos.Rebalance()])\n",
        "backtest = bt.Backtest(sma_crossover, spy_data[['Adj Close']])\n",
        "result = bt.run(backtest)\n",
        "\n",
        "# Performance metrics\n",
        "result.plot(title='Cumulative Returns of SMA Crossover Strategy vs SPY')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Section 5: Practical Applications and Limitations\n",
        "Implementing moving average strategies in practice involves inherent risks and limitations. It is essential to understand the volatility of the market and to be aware that past performance does not guarantee future results. The effectiveness of moving averages can fluctuate in different market conditions, and adjustments may be required based on prevailing trends.\n",
        "\n",
        "Exploring various parameters can lead to better understanding and improved strategy performance. The beauty of coding is that it allows you to tweak these variables and witness the outcomes immediately. This flexibility is an excellent method of learning and gaining confidence in your trading strategies.\n",
        "\n",
        "### Useful Resources\n",
        "- [Backtesting Strategies with Python and the BT Library](https://www.quantinsti.com/blog/backtesting-strategies-python-bt/)\n",
        "- [Understanding Moving Averages in Trading](https://www.investopedia.com/terms/m/movingaverage.asp)\n",
        "- [Practical Guide to Backtesting](https://www.backtest.org/)\n",
        "- [The Art of Trading Moving Averages](https://www.tradimo.com/learn/moving-average-trading-strategies/)\n",
        "- [Algorithmic Trading and Backtesting](https://www.quantstart.com/articles/backtesting-a-trading-strategy/)\n",
        "\n",
        "For further insights and visual demonstrations, do check out the corresponding video on the Data Driven Minutes YouTube channel!"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "portfolio-geek",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
