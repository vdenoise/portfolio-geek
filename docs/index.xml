<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Portfolio Geek</title>
<link>https://portfolio-geek.com/</link>
<atom:link href="https://portfolio-geek.com/index.xml" rel="self" type="application/rss+xml"/>
<description>Finance, Research and the Tech required to Fuel them</description>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Sat, 20 Jul 2024 23:00:00 GMT</lastBuildDate>
<item>
  <title>Daily Findings: Strava Insights, Key Finance Coding Skills, Data Science Portfolios, and Economic Forecasts</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-21_daily-curation.html</link>
  <description><![CDATA[ 





<p>In today’s curation, we explore various topics relevant to finance and data analysis, including:</p>
<ul>
<li>Analyzing competitive segments on Strava using R</li>
<li>Essential programming languages for finance careers</li>
<li>Building a professional data science portfolio with mkdocs</li>
<li>Trends in real household net worth and its implications</li>
<li>Economic forecasts indicating a potential U.S. recession</li>
</ul>
<p>Please find the detailed articles and resources in the table below.</p>
<section id="coding" class="level1">
<h1>Coding</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.r-bloggers.com/2024/07/king-of-the-mountain-using-r-to-bag-a-strava-kom/">Unlocking Strava Secrets: Using R and Data Science to Dominate Running Segments and Set Course Records (Rstats, 2024-07-20)</a></td>
<td>Strava allows users to compete for King or Queen of the Mountain titles. Using R and its API, users can analyse segments to identify beatable course records for running.</td>
</tr>
<tr class="even">
<td><a href="https://www.techspot.com/news/103878-3-programming-languages-help-you-land-job-finance.html">Unlock Your Finance Career: Master These 3 Programming Languages for Top Job Prospects (TechSpot, 2024-07-20)</a></td>
<td>Three key programming languages for finance jobs are SQL, Python, and Java. SQL leads with 24.4% demand, followed by Python at 18%, and Java at 14%.</td>
</tr>
<tr class="odd">
<td><a href="https://towardsdatascience.com/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0">Create a Stunning Data Science Portfolio Using Python and mkdocs: A Step-by-Step Guide (Towards Data Science, 2024-07-20)</a></td>
<td>This article details the author’s journey in creating a professional data science portfolio using mkdocs, highlighting environment setup, Git configuration, and iterative improvement based on community standards.</td>
</tr>
</tbody>
</table>
</section>
<section id="economics" class="level1">
<h1>Economics</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://econbrowser.com/archives/2024/07/can-one-have-a-recession-start-when-real-household-wealth-is-rising">Recession Paradox: Can Rising Household Wealth Signal Economic Downturn? (Apollo, 2024-07-20)</a></td>
<td>Torsten Slok discusses real household net worth trends around NBER peaks. Historically, net worth decreased before recessions, except in 2020. In 2024Q1, real net worth increased by 10%.</td>
</tr>
</tbody>
</table>
</section>
<section id="market-pulse-market-news" class="level1">
<h1>Market Pulse &amp; Market News</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="http://climateerinvest.blogspot.com/2024/07/recession-odds-grow-as-consumers-pull.html">Impending Recession Signals as Consumer Savings Decline and Investment Contributions Waver (Barron’s, 2024-07-20)</a></td>
<td>BCA Research forecasts a U.S. recession by late 2024 or early 2025, citing dwindling consumer savings, reduced consumption growth, and tight monetary policy impacting capital spending.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>coding</category>
  <category>economics</category>
  <category>market-feed</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-21_daily-curation.html</guid>
  <pubDate>Sat, 20 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/flat-lay-office-desk-with-laptop-notebook-pencil.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Daily Insights: GPT-4o Mini Launch, Bitcoin’s Safe-Haven Surge, AI Content Best Practices, Hill Repeats for Runners</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-20_daily-curation.html</link>
  <description><![CDATA[ 





<p>In today’s curation, we explore several noteworthy topics that highlight recent developments and insights in technology and finance:</p>
<ul>
<li>OpenAI’s launch of the more affordable GPT-4o mini.</li>
<li>Strategies for creating effective content prompts for generative AI.</li>
<li>The benefits of hill repeats for cardiovascular fitness.</li>
<li>Bitcoin’s evolving relationship with the S&amp;P 500 and its rising status as a safe-haven asset.</li>
</ul>
<section id="ai-and-gen-ai" class="level1">
<h1>AI and Gen-AI</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://lifehacker.com/tech/gpt-4o-mini-is-a-cheaper-almost-as-good-gpt-4o">Affordable AI Power: OpenAI’s GPT-4o Mini Brings High-Performance Language Processing at a Lower Cost (OpenAI Blog, 2024-07-19)</a></td>
<td>OpenAI has launched GPT-4o mini, a cheaper alternative to GPT-4o, lacking audio/video processing. It offers similar performance and safety features but at significantly reduced pricing for developers.</td>
</tr>
</tbody>
</table>
</section>
<section id="automation" class="level1">
<h1>Automation</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://contently.com/2024/07/19/better-content-prompts-for-generative-ai/">Mastering AI Prompts: Elevate Your Content Creation with Precise, Strategic Commands (The Content Strategist, 2024-07-20)</a></td>
<td>Creating effective content prompts for generative AI involves specificity, choosing the right tools, fact-checking, and navigating copyright issues. Clear guidelines help mitigate risks associated with AI-generated content.</td>
</tr>
</tbody>
</table>
</section>
<section id="personal-development" class="level1">
<h1>Personal Development</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://lifehacker.com/health/how-to-run-hill-repeats">Mastering Your Runs: The Ultimate Guide to Effective Hill Workouts for Peak Cardiovascular Fitness and Strength Training (The blog name is not explicitly mentioned in the provided content., 2024-07-19)</a></td>
<td>Hill repeats improve cardiovascular fitness and strength. They are low impact, enhance running form, and provide confidence. Use varied inclines and adjust reps as needed, even on flat terrain.</td>
</tr>
</tbody>
</table>
</section>
<section id="portfolio-construction-techniques" class="level1">
<h1>Portfolio Construction Techniques</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.valuewalk.com/bitcoin-sp500-correlation-breaks/">Bitcoin Defies Market Trends: Bullish Surge Amid US Market Decline and Financial Uncertainty (Bloomberg, 2024-07-20)</a></td>
<td>Bitcoin has broken its correlation with the S&amp;P 500, rising despite market declines. Strong ETF inflows and strategic remarks about Bitcoin boost its potential as a safe-haven asset.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>ai</category>
  <category>automation</category>
  <category>personal-dvpt</category>
  <category>portfolio-construction</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-20_daily-curation.html</guid>
  <pubDate>Fri, 19 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/blog-post.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Daily Market Insights: Fed Influence, Small Cap Squeeze, and Portfolio Risk Reassessment</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-19_daily-curation.html</link>
  <description><![CDATA[ 





<p>In today’s curation, we explore key trends and insights impacting financial markets:</p>
<ul>
<li>Shift in investor sentiment from large-cap to small-cap stocks due to potential Fed interest rate cuts, leading to short squeeze opportunities.</li>
<li>Analysis of the evolving correlation between stocks and bonds, affecting portfolio risk assessment.</li>
<li>Insights on private capital valuation and the significance of lagged betas for managing systemic risk.</li>
</ul>
<section id="market-pulse-market-news" class="level1">
<h1>Market Pulse &amp; Market News</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://moneymorning.com/2024/07/19/short-sellers-hate-that-these-stocks-are-moving-higher/">Unlock Potential Gains: Top Stocks Benefiting from Potential Fed Rate Cuts and Short Squeeze Opportunities (Traders Reserve, 2024-07-19)</a></td>
<td>Investors are moving away from large cap stocks as the Fed is likely to drop interest rates, causing a shift in sentiment. This is creating short squeeze opportunities in small cap stocks. Some short squeeze candidates include the S&amp;P Biotech ETF(XBI), Chevron (CVX), and Royal Caribbean Cruise Lines (RCL).</td>
</tr>
</tbody>
</table>
</section>
<section id="portfolio-construction-techniques" class="level1">
<h1>Portfolio Construction Techniques</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="http://mrzepczynski.blogspot.com/2024/07/why-is-stock-bond-correlation-important.html">Rethinking Your Portfolio: The Crucial Impact of Changing Stock-Bond Correlations (Unknown, 2024-07-19)</a></td>
<td>The correlation between stocks and bonds is historically negative, providing diversification. However, this correlation can change over time, leading to increased portfolio risk. Investors should regularly reassess their asset allocation.</td>
</tr>
<tr class="even">
<td><a href="https://alphaarchitect.com/2024/07/amortizing-volatility/">Private Investments: Unveiling Hidden Risks and Smoothing Effects on Volatility (Alpha Architect, 2024-07-19)</a></td>
<td>Private capital managers have discretion in valuing their portfolios, which results in smoother returns and understated volatility. Failure to consider lagged betas leads to underestimating risk and overestimating alpha. Mark Anson’s study found that private investments exhibit significant serial correlation at the quarterly level and that lagged betas account for a significant amount of returns associated with private capital alpha. Adjusting for lagged betas leads to lower allocations and drops in Sharpe ratios. It is important for investors to properly account for systemic risk in private assets by including estimates of lagged betas.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>market-feed</category>
  <category>portfolio-construction</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-19_daily-curation.html</guid>
  <pubDate>Thu, 18 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/portfolio-optimisation.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Mastering Linux Scripting, Trend-Following Strategies, and Evolution of Large Language Models in Today’s Financial Landscape</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-18_daily-curation.html</link>
  <description><![CDATA[ 





<p>In today’s curation, we explore several crucial topics in financial technology and market strategies. The highlights include:</p>
<ul>
<li>Scripting languages like Bash, Python, and Perl for task automation in Linux.</li>
<li>A trend-following investment strategy framework by Dobromir Tzotchev focusing on risk management and portfolio diversification.</li>
<li>An overview of Large Language Models (LLMs) and their evolution in natural language processing.</li>
</ul>
<section id="automation" class="level1">
<h1>Automation</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.linuxjournal.com/content/simple-linux-shell-scripts-bash-python-and-perl-will-get-you-and-running">Unlock Your Linux System’s Potential: Automate Tasks with Bash, Python, and Perl Scripts for Improved Productivity (Linux Journal, 2024-07-18)</a></td>
<td>Bash, Python, and Perl are powerful Linux scripting languages for task automation, offering unique features like command integration, extensive libraries, and text processing capabilities for efficient system management.</td>
</tr>
</tbody>
</table>
</section>
<section id="quantative-investing" class="level1">
<h1>Quantative Investing</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://quantpedia.com/">Master Trend-Following Strategies: Learn the Key Tactics for Consistent Market Success (Quantpedia, 2024-07-18)</a></td>
<td>Dobromir Tzotchev’s framework outlines a robust trend-following strategy emphasizing a clean signal, portfolio diversification, and effective risk management techniques for consistent returns in varying market conditions.</td>
</tr>
</tbody>
</table>
</section>
<section id="technology" class="level1">
<h1>Technology</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.datasciencecentral.com/history-and-future-of-llms/">Neural Networks to Modern AI: The Evolution and Future of Large Language Models (Data Science Central, 2024-07-18)</a></td>
<td>Large Language Models (LLMs) evolved from rule-based NLP to transformers, utilizing attention mechanisms and multimodal inputs, with advancements in hardware, algorithms, and smaller models to enhance efficiency and performance.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>automation</category>
  <category>quant</category>
  <category>tech</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-18_daily-curation.html</guid>
  <pubDate>Wed, 17 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/stock-valuation.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Today’s Curation: Master Python Trading with Alpaca, Retirement Strategies, &amp; Managing Risks with Options</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-17_daily-curation.html</link>
  <description><![CDATA[ 





<p>In this curation for 17/07/2024, we explore a range of financial concepts and strategies that can enhance your investment approach:</p>
<ul>
<li>Retirement planning frameworks: the 4% and 25x rules</li>
<li>Trading with Alpaca: setting up Python and executing trades</li>
<li>Utilizing Pandas for strategy testing in Python</li>
<li>Portfolio hedging with put options</li>
<li>Python protocols for improved code structure</li>
<li>Historical economic perspectives of Carl Linnaeus</li>
<li>Recession probabilities and economic indicators</li>
<li>Central banks and yield curve control</li>
<li>Analysis of China’s real estate market impacts</li>
<li>Tactical asset allocation strategies</li>
</ul>
<p>This selection aims to provide insights into both practical trading techniques and broader economic theories.</p>
<section id="asset-management" class="level1">
<h1>Asset Management</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://awealthofcommonsense.com/2024/07/how-much-money-you-need-for-retirement/">Is 25x Your Annual Spending the Magic Number for a Secure Retirement? (A Wealth of Common Sense, 2024-07-17)</a></td>
<td>The 4% rule and 25x rule provide retirement planning frameworks, but individual circumstances may necessitate more savings for a greater safety margin against uncertainties.</td>
</tr>
</tbody>
</table>
</section>
<section id="coding" class="level1">
<h1>Coding</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://pyquantnews.com/the-pyquant-newsletter/how-to-trade-a-covered-call-with-alpaca">Master Covered Calls in a Bullish Market: Simple Python Automation with Alpaca Trading API (Alpaca, 2024-06-21)</a></td>
<td>Create an Alpaca account, set up Python with the Alpaca library, and use the API to execute trades for covered calls, managing positions effectively.</td>
</tr>
<tr class="even">
<td><a href="https://pyquantnews.com/the-pyquant-newsletter/quickly-make-a-trading-strategy-with-a-82-win-rate">Unlock Trading Secrets: Use Python to Achieve an 82% Win Rate with Simple SPY Strategy (Quantifiable Edges, 2024-06-19)</a></td>
<td>Pandas in Python enables quick trading strategy testing with an 82% win rate by analyzing historical data, identifying 3-day losing streaks, and calculating future returns.</td>
</tr>
<tr class="odd">
<td><a href="https://robotwealth.com/portfolio-hedging-with-put-options/">Shield Your Investments: Easy Techniques to Protect Your Portfolio with Put Options (Robot Wealth, 2024-07-16)</a></td>
<td>This post discusses portfolio hedging using put options to limit downside risk, including examples, calculating beta, and considerations of risk tolerance and trading edge when hedging strategies.</td>
</tr>
<tr class="even">
<td><a href="https://realpython.com/python-protocol/">Unlock Dynamic Python Typing: Master Protocols for Robust, Cleaner Code Without Inheritance Constraints (Towards Data Science, 2024-07-17)</a></td>
<td>Protocols in Python enable structural subtyping, allowing type checking without inheritance. They enhance type hints for static duck typing, improving code flexibility, readability, and reliability.</td>
</tr>
</tbody>
</table>
</section>
<section id="economics" class="level1">
<h1>Economics</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://conversableeconomist.com/2024/07/16/unexpected-economist-carl-linnaeus-on-economic-theory/">Carl Linnaeus: The Botanist Who Secretly Shaped Economic Theory and Advocated Autarky (Conversable Economist, 2024-07-16)</a></td>
<td>Carl Linnaeus viewed economics as essential for well-being, favored mercantilism, endorsed self-sufficiency, and believed all nations possessed natural resources for economic flourishing, despite his obsession with gold.</td>
</tr>
<tr class="even">
<td><a href="https://econbrowser.com/archives/2024/07/recession-probabilities-for-june-2025">Recession Risks Explained: Key Metrics to Watch for June 2025 Forecasts (NBER, 2024-07-17)</a></td>
<td>Recession probabilities for June 2025 indicate varied outcomes based on models, showing 60% likelihood with basic indicators and 20% with additional debt measures, reflecting declining debt-service ratios.</td>
</tr>
<tr class="odd">
<td><a href="http://climateerinvest.blogspot.com/2024/07/yield-curve-control-means-party-can.html">The Hidden Risks of Central Bank Yield Curve Control and Its Impact on Economic Stability (Climateer Investing, 2024-07-17)</a></td>
<td>Central banks disguise risk through yield curve control, preventing bond yields from rising and perpetuating economic stagnation, resulting in more debt and inefficient allocation of resources.</td>
</tr>
</tbody>
</table>
</section>
<section id="fundamental-investing" class="level1">
<h1>Fundamental Investing</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://econbrowser.com/archives/2024/07/china-economic-sentiment">China’s Real Estate Woes: Understanding Economic Sentiment Through Insightful Graphs from Apollo’s Torsten Slok (Econbrowser, 2024-07-17)</a></td>
<td>Torsten Slok’s China analysis highlights real estate market collapse effects, featuring graphs illustrating economic challenges, emphasizing a constant narrative in interpreting China’s economic statistics.</td>
</tr>
</tbody>
</table>
</section>
<section id="portfolio-construction-techniques" class="level1">
<h1>Portfolio Construction Techniques</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://allocatesmartly.com/pragmatic-asset-allocation-from-vojtko-and-javorska-of-quantpedia/">Optimize Your Investments with Pragmatic Asset Allocation: A Smart, Tax-Efficient Strategy for Every Market Condition (Quantpedia, 2024-07-16)</a></td>
<td>Pragmatic Asset Allocation is a tactical strategy focusing on tax efficiency, trading based on yield curve inversion, and adjusting asset allocation quarterly for optimal performance.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>asset-management</category>
  <category>coding</category>
  <category>economics</category>
  <category>fundamental</category>
  <category>portfolio-construction</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-17_daily-curation.html</guid>
  <pubDate>Tue, 16 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/laptop-data.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Daily Insights: Declining Asset Manager Margins, Fixed Income Trends, Nasdaq-100 Futures Growth, and Surging India Equity Market</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-16_daily-curation.html</link>
  <description><![CDATA[ 





<p>In today’s curation, we explore key developments in finance and investment. The following topics are highlighted:</p>
<ul>
<li>Asset managers and declining profit margins</li>
<li>Evolution of passive investing in fixed income</li>
<li>Growth of E-mini Nasdaq-100 futures</li>
<li>Impact of severe weather on shipping near South Africa</li>
<li>Wage growth trends for low-wage workers</li>
<li>Benchmarking private capital effectively</li>
<li>Burberry’s challenging first-quarter results</li>
<li>Growth in India’s equity market</li>
<li>S&amp;P 500 earnings growth expectations for Q2</li>
</ul>
<section id="asset-management" class="level1">
<h1>Asset Management</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.institutionalinvestor.com/article/2dhfi05x8k2pr2loq4v0g/corner-office/asset-manager-profit-margins-get-thinner">Why Asset Managers Struggle Despite Booming Markets: Rising Costs and the Push for Alternative Investments Explained (Casey Quirk, 2024-07-15)</a></td>
<td>Asset managers face declining profit margins despite rising markets, driven by increased operating costs and weak inflows, prompting a focus on alternative investments for growth and adaptation.</td>
</tr>
<tr class="even">
<td><a href="https://www.institutionalinvestor.com/article/2dg5aji7ohkluumcrwy68/innovation/index-investing-as-an-active-decision-implications-for-fixed-income-investors">Unlocking Precision and Efficiency: Why Passive Fixed Income Strategies Are Transforming Modern Investment Portfolios (Northern Trust Asset Management., 2024-07-16)</a></td>
<td>Passive investing in fixed income has evolved, offering customization, precision, and better risk management, despite challenges like liquidity and replication concerns, attracting more investments than active strategies.</td>
</tr>
<tr class="odd">
<td><a href="https://seekingalpha.com/article/4703878-tech-growth-25-years-nasdaq-futures">Navigating Tech Sector Growth: How E-mini Nasdaq-100 Futures Shape Modern Investment and Risk Management Strategies (Seeking Alpha, 2024-07-16)</a></td>
<td>E-mini Nasdaq-100 futures, launched in 1999, have grown substantially in volume, reflecting the importance of technology stocks and risk management in today’s market landscape.</td>
</tr>
</tbody>
</table>
</section>
<section id="economics" class="level1">
<h1>Economics</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://finance.yahoo.com/news/ships-fleeing-red-sea-now-160349344.html">Shipping Chaos: Violent Storms Off South Africa Cause Major Disruptions and Container Losses (Bloomberg, 2024-07-15)</a></td>
<td>Ships near South Africa face severe weather, causing container losses and delays. Many vessels are diverting routes to avoid risk from Houthi militants in the Red Sea.</td>
</tr>
<tr class="even">
<td><a href="https://angrybearblog.com/2024/06/fastest-wage-growth-over-the-last-four-years">Pandemic Policies Fuel Unprecedented Wage Growth for Low-Wage Workers Over Recent Four-Year Period (Economic Policy Institute, 2024-07-16)</a></td>
<td>Low-wage workers experienced significant wage growth of 12.1% from 2019 to 2023, driven by policy responses and a tight labor market, marking a departure from historical trends.</td>
</tr>
</tbody>
</table>
</section>
<section id="etfs-and-index-investing" class="level1">
<h1>ETFs and Index Investing</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.msci.com/www/blog-posts/the-cornerstones-of/04783300823">Unlocking the Secrets of Private Capital Performance: A Smart Guide to Benchmarking and Index Creation (MSCI, 2024-07-16)</a></td>
<td>Benchmarking private capital requires accurate data, defined inclusion criteria, and a strong governance framework to measure performance through various index types and calculations effectively.</td>
</tr>
</tbody>
</table>
</section>
<section id="fundamental-investing" class="level1">
<h1>Fundamental Investing</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.institutionalinvestor.com/article/2dhfi05x8k2pr2loq4v0g/corner-office/asset-manager-profit-margins-get-thinner">Asset Managers’ Profits Decline Despite Market Growth, Rising Costs and Innovation Needs Challenge Firms (Institutional Investor., 2024-07-15)</a></td>
<td>Asset managers face declining profit margins due to rising costs, weak inflows, and the need for innovation despite a strong stock market. Strategic adaptation is essential for future success.</td>
</tr>
<tr class="even">
<td><a href="https://sherwood.news/markets/europes-luxury-stocks-have-boomed-burberry-got-left-behind/">Burberry Faces Tough Quarter: Sales Drop, CEO Resigns, and Brand Strategy Questioned (Sherwood, 2024-07-15)</a></td>
<td>Burberry’s first-quarter results showed a 22% revenue drop, CEO resignation, dividend suspension, and declining sales, prompting challenges for the new CEO amidst declining brand exclusivity and market presence.</td>
</tr>
<tr class="odd">
<td><a href="https://www.msci.com/www/blog-posts/india-s-changed-and-changing/04777168512">India’s Equity Market Evolution: New Listings, Venture-Backed Firms, and Potential Power Shifts for Global Investors (MSCI, 2024-07-16)</a></td>
<td>India’s equity market shows significant growth, with over 300 new companies since 2020, highlighting changes in industry profiles and future potential from private market entrants.</td>
</tr>
<tr class="even">
<td><a href="https://insight.factset.com/sp-500-will-likely-report-earnings-growth-of-at-least-12-for-q2">S&amp;P 500 Earnings Surge: Historical Data Predicts Over 12% Growth for Q2, Outperforming Estimates (FactSet, 2024-07-16)</a></td>
<td>S&amp;P 500 expected to report earnings growth above 12% for Q2, supported by historical trends of exceeding estimates, with 81% of companies reporting higher EPS so far.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>asset-management</category>
  <category>economics</category>
  <category>etf</category>
  <category>fundamental</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-16_daily-curation.html</guid>
  <pubDate>Mon, 15 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/time-horizon-paper.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Today’s Financial Curation: Fed’s Inflation Forecast, Q2 Earnings Surge, ETF Market Shifts, and Automatic Savings Boost</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-15_daily-curation.html</link>
  <description><![CDATA[ 





<p>In today’s curation, we explore a range of critical financial topics that impact current market dynamics:</p>
<ul>
<li>The New York Fed’s inflation and output growth predictions</li>
<li>Amazon’s competitive strategies amidst Prime Week</li>
<li>Insights from Q2 earnings season and stock performance</li>
<li>Opportunities in the QQQJ ETF showcasing tech growth</li>
<li>Implications of potential Fed interest rate cuts</li>
<li>The UST yield curve and its relevance to rate changes</li>
<li>The Moat Index’s recent findings on market trends</li>
<li>The benefits of automatic retirement savings</li>
<li>Recovery signs in the banking sector</li>
<li>The complexities of maintaining a balanced investment portfolio</li>
</ul>
<section id="economics" class="level1">
<h1>Economics</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://libertystreeteconomics.newyorkfed.org/2024/06/the-new-york-fed-dsge-model-forecast-june-2024/">Why Inflation is Surging and Growth is Slumping: Key Insights from the New York Fed’s Latest Forecast (Federal Reserve Bank of New York, 2024-06-14)</a></td>
<td>The New York Fed’s DSGE model forecasts higher core PCE inflation at 2.7% and lower output growth at 1.0% for 2024, attributing changes to cost-push shocks and monetary policy.</td>
</tr>
<tr class="even">
<td><a href="https://lipperalpha.refinitiv.com/2024/07/savvy-shoppers-await-prime-week-deal-competition/">Savvy Challenges: How Retailers Leverage Amazon Prime Week to Battle Inflation and Woo Value-Conscious Consumers (LSEG Workspace, 2024-07-15)</a></td>
<td>Amazon’s Prime Week prompts retailers to offer competitive discounts, aiming to attract value-oriented shoppers while facing inflation, with increased online discount penetration and evolving consumer preferences.</td>
</tr>
</tbody>
</table>
</section>
<section id="fundamental-investing" class="level1">
<h1>Fundamental Investing</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.tker.co/p/earnings-season-q2-24-beat-rates">Earnings Season Q2 2024: Why Most Companies Consistently Surpass Analysts’ Expectations (TKer, 2024-07-15)</a></td>
<td>Stocks are at record highs as Q2 earnings season begins, with companies likely to beat estimates by about 5%. Analysts maintain positive outlooks despite recession risks being elevated.</td>
</tr>
<tr class="even">
<td><a href="https://www.etftrends.com/etf-education-channel/time-different-small-cap-stocks-finally-perking-up/">Discover Hidden Tech Gems: The Invesco NASDAQ Next Gen ETF’s Potential in Small-Cap Stocks (ETF Trends, 2024-07-15)</a></td>
<td>QQQJ ETF, targeting Nasdaq Next Generation 100, includes promising tech stocks like Zoom, NICE, and Paylocity, offering growth opportunities in a market dominated by mega-cap equities.</td>
</tr>
</tbody>
</table>
</section>
<section id="market-pulse-market-news" class="level1">
<h1>Market Pulse &amp; Market News</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://moneymorning.com/2024/07/15/these-three-investment-are-getting-ready-to-be-jerome-powells-favorite/">Prepare for Market Shake-Up: Key Sectors Poised to Surge as Fed Signals Interest Rate Cuts Before Election (Unknown, 2024-07-15)</a></td>
<td>The Fed’s potential interest rate cuts may boost small cap stocks, regional banks, and real estate, prompting a significant market shift and attracting investors seeking higher returns.</td>
</tr>
<tr class="even">
<td><a href="https://www.wisdomtree.com/investments/blog/2024/07/10/when-will-the-yield-curve-uninvert">Why You Should Care About the Timing of the Yield Curve’s Next Move (WisdomTree’s website, 2024-07-15)</a></td>
<td>The UST yield curve’s potential “un”inversion timing hinges on Fed rate cuts, with the UST 2-Year/10-Year spread likely reversing before the UST 3-Month/10-Year spread.</td>
</tr>
<tr class="odd">
<td><a href="https://www.vaneck.com/us/en/blogs/moat-investing/moat-stocks-steady-amid-techs-market-surge/">Smart Investing: How Quarterly Reviews Shape the Moat Index and Spotlight Top Undervalued Companies (Moat Index Quarterly Review, 2024-07-15)</a></td>
<td>Moat Index reviews revealed a contrarian bias towards large caps, reduced Financials exposure, and increased allocations in Consumer Staples, Industrials, and Technology, remaining underweight in growth stocks.</td>
</tr>
<tr class="even">
<td><a href="https://awealthofcommonsense.com/2024/07/the-automatic-investing-revolution/">Elevate Your Retirement Savings: How Higher Default Rates and Automatic Investing Are Reshaping Financial Futures (A Wealth of Common Sense, 2024-07-15)</a></td>
<td>The shift to automatic retirement savings, like higher default rates, improves participation and investor behavior, positively affecting stock market valuations while highlighting the limitations of defined contribution plans.</td>
</tr>
<tr class="odd">
<td><a href="https://moneymorning.com/2024/07/15/this-bullish-trend-in-banks-is-just-starting-grab-it-now/">Banking Renaissance: Why Investor Sentiment Shift Signals a Golden Opportunity in Financial Stocks (Unknown, 2024-07-15)</a></td>
<td>The banking sector shows potential recovery as interest rates may soon lower, with investor sentiment shifting and earnings reports exceeding expectations, presenting buying opportunities in ETFs like KBE and KRE.</td>
</tr>
</tbody>
</table>
</section>
<section id="portfolio-construction-techniques" class="level1">
<h1>Portfolio Construction Techniques</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://awealthofcommonsense.com/2024/07/a-balanced-portfolio-always-comes-with-regrets/">Balancing Investments: Why Diversification May Seem Boring But Is Actually Smart and Lowers Your Risk (None, 2024-07-14)</a></td>
<td>A balanced portfolio, while providing stability, often leads to regrets as market performance varies. Diversification reduces risk but can’t predict future outcomes, emphasizing the importance of a long-term strategy.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>economics</category>
  <category>fundamental</category>
  <category>market-feed</category>
  <category>portfolio-construction</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-15_daily-curation.html</guid>
  <pubDate>Sun, 14 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/mathematics-formulas-on-a-blackboard.png" medium="image" type="image/png" height="95" width="144"/>
</item>
<item>
  <title>Welcome to Your Daily Financial Curation: Python Automation, Climate Action, ECB Policy Signals, and US Heatwave Insights</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-14_daily-curation.html</link>
  <description><![CDATA[ 





<p>In today’s curation, I present a range of insights related to finance, climate change, and technological advancements. Key topics include:</p>
<ul>
<li>Quick tips for creating engaging social media content using ChatGPT</li>
<li>Python automation scripts for enhancing productivity</li>
<li>Denmark’s new tax on agricultural emissions</li>
<li>BlackRock’s climate-focused stewardship guidelines</li>
<li>Recent record-high global temperatures and their implications</li>
</ul>
<p>Please find detailed summaries in the table below.</p>
<section id="automation" class="level1">
<h1>Automation</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.forbes.com/sites/jodiecook/2024/07/12/5-chatgpt-prompts-to-create-30-pieces-of-content-in-30-minutes/">Create 30 High-Impact Social Media Posts in 30 Minutes with ChatGPT Tips for Busy Professionals (Forbes, 2024-07-14)</a></td>
<td>Use five prompts with ChatGPT to quickly generate 30 pieces of engaging social media content by providing context, core ideas, examples, post formats, and edits.</td>
</tr>
<tr class="even">
<td><a href="https://medium.com/pythoneers/17-mindblowing-python-automation-scripts-i-use-everyday-523fb1eb9284">Transform Your Daily Routine with These Essential Python Automation Scripts (Towards Data Science, 2024-07-14)</a></td>
<td>The author shares Python automation scripts that enhance productivity, including a script to convert PDF files into audio books using the PyPDF2 and pyttsx3 libraries.</td>
</tr>
</tbody>
</table>
</section>
<section id="climate" class="level1">
<h1>Climate</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.carbonbrief.org/qa-how-denmark-plans-to-tax-agriculture-emissions-to-meet-climate-goals/">Denmark’s Innovative Agricultural Emissions Tax: Leading the Charge Toward Global Climate Goals and Sustainable Farming Practices (Carbon Brief, 2024-07-09)</a></td>
<td>Denmark will implement a tax on agricultural emissions in 2030, aiming for significant CO2 reductions and supporting the livestock industry’s transition to greener practices, influencing global policies.</td>
</tr>
<tr class="even">
<td><a href="https://www.esgtoday.com/blackrock-launches-decarbonization-voting-and-engagement-policy-for-climate-focused-funds/">BlackRock Sets New Climate Standards with Decarbonization Voting Policy for Eco-Conscious Investors (ESG Today, 2024-07-10)</a></td>
<td>BlackRock introduced “Climate and Decarbonization Stewardship Guidelines” to enhance voting and engagement for climate-focused funds, prioritizing low-carbon transition and demanding disclosure of emissions reduction targets from companies.</td>
</tr>
<tr class="odd">
<td><a href="https://www.oxfordmail.co.uk/news/24401044.oxford-university-climate-survey-shows-majority-want-action/">Global Majority Urge Governments to Overcome Differences and Tackle Climate Change, Says Oxford University Survey (Oxford Mail, 2024-07-14)</a></td>
<td>A UNDP-Oxford survey shows 86% want stronger climate action, with 72% supporting a shift from fossil fuels, highlighting women’s greater advocacy for enhanced climate commitments.</td>
</tr>
<tr class="even">
<td><a href="https://www.theguardian.com/environment/article/2024/jul/08/temperatures-1-point-5c-above-pre-industrial-era-average-for-12-months-data-shows">Planet Faces Year of Record Heat: 12 Months at 1.5°C Above Pre-Industrial Levels Raise Alarming Climate Concerns (The Guardian, 2024-07-14)</a></td>
<td>The world has experienced 12 consecutive months of record-high temperatures, exceeding 1.5°C above pre-industrial levels, highlighting urgent climate change risks and the need for emission reductions.</td>
</tr>
<tr class="odd">
<td><a href="https://www.cnn.com/2024/07/07/weather/west-coast-heat-wave-california-nevada-oregon/index.html">Unrelenting Heatwave Shatters Records Across US: Health Risks and Wildfire Threats Surge Amid Scorching Temperatures (CNN, 2024-07-14)</a></td>
<td>Record-breaking heat continues across the US, with temperatures exceeding 100 degrees in many areas, increased wildfire risks, and heat alerts impacting millions from the West to the East Coast.</td>
</tr>
<tr class="even">
<td><a href="https://www.theclimatebrink.com/p/can-we-air-condition-our-way-out">The High Cost of Staying Cool: How Air Conditioning Fails to Beat Climate Change (The Climate Brink, 2024-07-14)</a></td>
<td>Air conditioning is essential for survival amid climate change, but increasing costs disproportionately affect the poor, highlighting equity issues and the need for government support in adaptation efforts.</td>
</tr>
<tr class="odd">
<td><a href="https://www.theclimatebrink.com/p/the-growing-carbon-debt">Our Carbon Debt Crisis: The Environmental Costs Future Generations Will Inherit (Carbon Brief, 2024-06-27)</a></td>
<td>The growing carbon debt requires future generations to remove excess CO2, as emissions persist long-term, necessitating urgent action to minimize climate impact and reduce future burdens.</td>
</tr>
</tbody>
</table>
</section>
<section id="market-pulse-market-news" class="level1">
<h1>Market Pulse &amp; Market News</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.bloomberg.com/news/articles/2024-07-13/ecb-rate-cuts-lagarde-poised-for-holiday-may-prime-markets-for-september?srnd=economics-v2&amp;sref=ZPVkTM30">Is Europe Headed for Another Interest Rate Cut? What to Expect from the ECB in September (Bloomberg, 2024-07-14)</a></td>
<td>European Central Bank officials may signal an interest-rate cut, observing inflation pressures, while traders await insights from President Lagarde ahead of the September 12 meeting following a long summer break.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>automation</category>
  <category>climate</category>
  <category>market-feed</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-14_daily-curation.html</guid>
  <pubDate>Sat, 13 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/flat-lay-office-desk-with-laptop-notebook-pencil.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Today’s Picks: Wind Power Surpasses Coal, EV Savings for Rural Families, Impact Investing, and Shifts in ETF Trends</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/daily-curation/2024-07-13_daily-curation.html</link>
  <description><![CDATA[ 





<p>As of July 13, 2024, today’s curation highlights key developments in finance, energy, and educational initiatives. Below are the summarized topics:</p>
<ul>
<li>The financial benefits of electric vehicles for rural families in the US.</li>
<li>The rise of impact investing amidst ESG skepticism.</li>
<li>Wind power’s dominance over coal in US electricity generation.</li>
<li>Concerns surrounding BlackRock’s climate transition ETFs.</li>
<li>Introduction of Vectorlite, a new SQLite extension for vector search.</li>
<li>Trends in the existing home market and housing prices.</li>
<li>Johns Hopkins Medical School’s significant donation for free tuition.</li>
<li>Recent ETF inflows, particularly in core equity and bonds.</li>
<li>Insights on the impact of passive investing on market dynamics.</li>
</ul>
<section id="climate" class="level1">
<h1>Climate</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://skepticalscience.com/rural-families-saving-thousands-evs.html">Electric Vehicles: A Game-Changer for Rural Families Saving Big on Fuel and Maintenance Costs (Skeptical Science, 2024-07-09)</a></td>
<td>Rural families in the US are saving money by switching to electric vehicles (EVs) and avoiding gas expenses. EVs require less maintenance and have financial incentives, making them cost-effective.</td>
</tr>
<tr class="even">
<td><a href="https://www.forbes.com.au/brand-voice/brandvoice/rip-esg-how-impact-investing-can-help-save-an-industry-in-crisis/">Impact Investing: A Smart Alternative to ESG for Optimized Financial and Social Returns (Forbes Australia, 2024-07-13)</a></td>
<td>Amidst ESG skepticism, impact investing gains recognition as a credible way to back companies that deliver positive impact and financial returns. Investors prioritize measurable impact activities aligned with the UN Sustainable Development Goals.</td>
</tr>
<tr class="odd">
<td><a href="https://sherwood.news/power/lean-energy-wind-generated-more-electricity-than-coal/">Wind Power Surpasses Coal in US Electricity Production as Renewable Energy Continues to Rise (Sherwood News, 2024-07-13)</a></td>
<td>Wind power has surpassed coal as a major source of electricity in the US for two consecutive months. Renewable energy accounted for 21% of electricity generation in 2019.</td>
</tr>
<tr class="even">
<td><a href="https://www.etfstream.com/articles/blackrock-climate-transition-etfs-portfolio-tool-or-tick-box-exercise">Are BlackRock’s New Climate ETFs Truly Driving Change or Just Ticking Boxes for Sustainable Investment Goals? (ETF Stream, 2024-06-24)</a></td>
<td>BlackRock’s new climate transition ETFs offer ESG tilting, but concerns remain about their impact. The ETFs may be a useful tool for institutional investors, but lack exposure to key sectors.</td>
</tr>
</tbody>
</table>
</section>
<section id="coding" class="level1">
<h1>Coding</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.reddit.com/r/Python/comments/1e26xsm/vectorlite_a_fast_vector_search_extension_for/">Make SQLite Smarter and Faster with Vectorlite: Your Go-To Extension for Enhanced Vector Search in AI Applications (Reddit, 2024-07-13)</a></td>
<td>Vectorlite is a fast and tunable vector search extension for SQLite, offering improved performance, metadata filter support, index serialization, and cross-platform compatibility compared to similar solutions like sqlite-vss.</td>
</tr>
</tbody>
</table>
</section>
<section id="economics" class="level1">
<h1>Economics</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="http://www.calculatedriskblog.com/2024/07/realtorcom-reports-active-inventory-up_01292103715.html">Home Inventory Grows 34.5% YoY but Still Struggles to Meet Pre-Pandemic Levels: Insight into Current Market Trends (Calculated Risk, 2024-07-11)</a></td>
<td>Active inventory in the existing home market increased by 34.5% YoY, marking the 35th consecutive week of growth. New listings declined 4.9% YoY. Buyers still face a 30% decrease in homes compared to pre-pandemic levels.</td>
</tr>
<tr class="even">
<td><a href="https://awealthofcommonsense.com/2024/07/buying-a-house-at-the-top-of-the-market/">Navigating Market Peaks: What to Know Before Buying a Home Amidst Soaring Prices and Mortgage Rates (A Wealth of Common Sense, 2024-07-13)</a></td>
<td>Housing prices have surged in recent years, but there are concerns about low returns going forward. The impact on homeowners may vary depending on their situation and future plans.</td>
</tr>
<tr class="odd">
<td><a href="https://www.npr.org/2024/07/09/g-s1-8876/johns-hopkins-medical-school-bloomberg">Bloomberg Donates $1 Billion to Johns Hopkins for Medical School Free Tuition and Comprehensive Student Support (NPR, 2024-07-13)</a></td>
<td>Johns Hopkins Medical School will offer free tuition to most students thanks to a $1 billion donation from Michael Bloomberg’s philanthropic organization.</td>
</tr>
</tbody>
</table>
</section>
<section id="etfs-and-index-investing" class="level1">
<h1>ETFs and Index Investing</h1>
<table class="table">
<thead>
<tr class="header">
<th>Title</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.etfstream.com/articles/core-equity-and-short-duration-bond-etfs-capture-most-inflows-in-q2">Investors Flock to Core Equity and Short-Duration Bonds Amid Market Rally and Inflation Concerns: Q2 Insights (ETF Stream, 2024-07-13)</a></td>
<td>Core equity and short-duration bond ETFs saw the highest inflows in Q2, while ESG ETFs experienced outflows. The iShares Core S&amp;P 500 UCITS ETF (CSPX) and the Xtrackers EUR Overnight Rate Swap UCITS ETF (XEON) were among the popular choices.</td>
</tr>
<tr class="even">
<td><a href="https://www.institutionalinvestor.com/article/2dgy5jctx2rb7g3wv2juo/portfolio/gmo-passive-investings-impact-has-been-overblown-but-its-not-negligible">How Passive Investing Subtly Shifts Market Dynamics: A New Perspective from GMO Experts (GMO Quarterly Letter, 2024-07-13)</a></td>
<td>The impact of passive investing on markets is less significant than believed, says GMO. The shift of retirement assets to defined contribution plans is coming to an end, limiting the future impact of passive flows.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>climate</category>
  <category>coding</category>
  <category>economics</category>
  <category>etf</category>
  <guid>https://portfolio-geek.com/posts/daily-curation/2024-07-13_daily-curation.html</guid>
  <pubDate>Fri, 12 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/pictures/blog-post.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Portfolio Optimisation with Python</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python.html</link>
  <description><![CDATA[ 




<p><img src="https://portfolio-geek.com/pictures/portfolio-optimisation.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
In Construction
</div>
</div>
<div class="callout-body-container callout-body">
<p>Thanks for popping by; please note that this article is still in construction.</p>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><strong>Harry Markowitz</strong> is one of the (if not “the”) fathers of modern portfolio construction and his seminal paper Portfolio Selection <sup>1</sup> has driven an entire research stream.</p>
<p>The <strong>intuition</strong> behind this paper is that one can combine the information gathered on expected returns, risks and diversification of various assets or asset classes with a view to optimise the risk-return profile of a given portfolio.</p>
<p>In practice, we typically find a limited stability of the portfolios generated using this approach, especially due the high sensitivity of the portfolio to the expected returns; nonetheless, the insights it provides are very useful and it’s a perfect start to see the impact of risk and diversification.</p>
<p>For this article, we will mostly rely on a fantastic Python library, PyPortfolioOpt <sup>2</sup> which will do the optimisation heavy lifting for us.</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<section id="loading-libraries" class="level3">
<h3 class="anchored" data-anchor-id="loading-libraries">Loading Libraries</h3>
<p>The main library to load here is indeed <strong>PyPortfolioOpt</strong>, and we will rely extensively on it in this article.</p>
<p>We need the following tools as well:</p>
<ul>
<li><strong>Pandas</strong>: load, filter, sort and pretty much all data wrangling operations;</li>
<li><strong>Numpy</strong>: provides most matrix and advanced numerical operations; this library is the calculation backbone for pandas;</li>
<li><strong>Matplotlib</strong>: the <em>de facto</em> reference library to draw scientific charts;</li>
<li><strong>yfinance</strong>: a very handy library to access many different online databases, including Yahoo Finance.</li>
</ul>
<div id="cell-3" class="cell" data-slideshow="{&quot;slide_type&quot;:&quot;slide&quot;}" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas_datareader.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> web_reader</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> yfinance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> yf</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pypfopt.efficient_frontier <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EfficientFrontier</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pypfopt <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> risk_models</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pypfopt <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> expected_returns</span></code></pre></div>
</details>
</div>
</section>
<section id="misc-parameters" class="level3">
<h3 class="anchored" data-anchor-id="misc-parameters">Misc Parameters</h3>
<p>In the code below, we set some variables to adjust the jupyter loo</p>
<div id="cell-5" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note that this change the decimals places inside Jupyter, but not on the website</span></span>
<span id="cb2-3">pd.options.display.float_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span></span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="defining-our-investable-universe" class="level2">
<h2 class="anchored" data-anchor-id="defining-our-investable-universe">Defining our Investable Universe</h2>
<p>First and foremost, we need to define our <strong>Investable Universe</strong> i.e.&nbsp;the set of asset classes that we will allow in our portfolio.</p>
<p>Many investors would typically think about single stocks, but on my side, I am typically looking at well diversified portfolios. Moreover, I am typically looking Long Term Investing, and as such, Indices, diversified portfolio or ETFs are in focus for me.</p>
<p>Speaking about asset classes, we need some ETFs to analyse!</p>
<blockquote class="blockquote">
<p>“Important: Please bear in mind this article if purely for pedagogical purpose and should by no mean be understood as a recommendation or advice. Investing brings risk and in particular risk of loss of capital. I have no intention to recommend anything! I will follow among others this recent article in US News{% fn 7%} and ETF.com{% fn 8%} as sources of inspiration to identify relevant ETFs.”</p>
</blockquote>
<section id="equity" class="level4">
<h4 class="anchored" data-anchor-id="equity"><strong>Equity</strong></h4>
<p>Let’s start with various Equity sub-asset classes:</p>
<ul>
<li><strong>IVV</strong>: iShares Core <strong>S&amp;P 500</strong> ETF representing US Equity Large Cap</li>
<li><strong>SCHA</strong>: Schwab <strong>U.S. Small-Cap</strong> ETF representing US Equity Small Cap</li>
<li><strong>IJH</strong>: iShares Core <strong>S&amp;P Mid-Cap</strong> ETF representing US Equity Mid Cap</li>
<li><strong>SCHD</strong>: Schwab <strong>U.S. Dividend Equity</strong> ETF representing US Equity Dividend (ie US stocks which are deemed to pay higher dividends)</li>
<li><strong>VTI</strong>: Vanguard <strong>Total Stock Market</strong> ETF representing US Equity, with all market cap included</li>
<li><strong>VXUS</strong>: Vanguard <strong>Total International Stock</strong> ETF representing World ex-US equities</li>
<li><strong>EEM</strong>: iShares <strong>MSCI Emerging Markets</strong> ETF representing the Emerging Market Equities</li>
</ul>
</section>
<section id="fixed-income" class="level4">
<h4 class="anchored" data-anchor-id="fixed-income"><strong>Fixed Income</strong></h4>
<p>Let’s add Fixed Income, which would typically aim to reduce the overall portfolio’s volatility:</p>
<ul>
<li><strong>AGG</strong>: iShares Core <strong>U.S. Aggregate Bond</strong> ETFrepresenting the entire US Bond market</li>
<li><strong>GOVT</strong>: iShares <strong>U.S. Treasury Bond</strong> ETF representing the performance of US Government Bonds</li>
<li><strong>VCLT</strong>: Vanguard <strong>Long-Term Corporate Bond</strong> ETF representing the Investment Grade USD denominated bonds.</li>
</ul>
</section>
<section id="alternative-assets" class="level4">
<h4 class="anchored" data-anchor-id="alternative-assets"><strong>Alternative Assets</strong></h4>
<p>Let’s add 2 additional asset classes, Gold and Commodities:</p>
<ul>
<li><strong>GLD</strong>: SPDR <strong>Gold</strong> Trust representing the price of **Gold</li>
<li><strong>PDBC</strong>: Invesco Optimum Yield Diversified <strong>Commodity</strong> Strategy No K-1 ETF** which will represent the performance of the Broad Commodities asset class</li>
</ul>
<p>Everything in the above is <strong>denominated in US Dollars</strong>, this will make our life easier in what follows, ie we will not need any currency conversion, which is always a bit painful in the process.</p>
</section>
</section>
<section id="parameters-and-data-gathering" class="level2">
<h2 class="anchored" data-anchor-id="parameters-and-data-gathering">Parameters and data gathering</h2>
<p>I recommend you to read this <strong><a href="../../posts/tutorials/en/spy-and-matplotlib.html">article about data gathering</a></strong>.</p>
<p>Like we did in this article, we will utilise <strong>yfinance</strong> to get historical time series. As mentioned above, we will look at the performance of ETFs, which we will consider as as relevant proxies for their respective asset classes.</p>
<p>You can of course utilise whatever asset class you want, and take single stocks, funds as historical data points. On my side, I am quite familiar with indices ETFs, and I will go with the selection above.</p>
<p>Last but not least, we need to define the <strong>start_date</strong> and <strong>end_date</strong> for gathering the historical time series. For this study, we will gather 7 years of data.</p>
<div id="cell-7" class="cell" data-slideshow="{&quot;slide_type&quot;:&quot;skip&quot;}" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018-03-01'</span></span>
<span id="cb3-4">end_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-03-01'</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define Investable Universe</span></span>
<span id="cb3-7">investable_universe_tickers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IVV'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SCHA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IJH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SCHD'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VTI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VXUS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EEM'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VCLT'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AGG'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GOVT'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PDBC'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GLD'</span>]</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get Historical Data</span></span>
<span id="cb3-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yf.download(investable_universe_tickers, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>start_date, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>end_date, progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-11">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adj Close'</span>]</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is required to round the blog's table into 2 decimals, Jupyter's formatting does not apply on the published website</span></span>
<span id="cb3-14">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</details>
</div>
<section id="data-gathering-results" class="level3">
<h3 class="anchored" data-anchor-id="data-gathering-results">Data gathering: <strong>results</strong></h3>
<p>The request above delivered a <strong>pandas data_frame</strong>, and here is a snapshot of the last 5 rows:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb4-2">df.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">AGG</th>
<th data-quarto-table-cell-role="th">EEM</th>
<th data-quarto-table-cell-role="th">GLD</th>
<th data-quarto-table-cell-role="th">GOVT</th>
<th data-quarto-table-cell-role="th">IJH</th>
<th data-quarto-table-cell-role="th">IVV</th>
<th data-quarto-table-cell-role="th">PDBC</th>
<th data-quarto-table-cell-role="th">SCHA</th>
<th data-quarto-table-cell-role="th">SCHD</th>
<th data-quarto-table-cell-role="th">VCLT</th>
<th data-quarto-table-cell-role="th">VTI</th>
<th data-quarto-table-cell-role="th">VXUS</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2023-02-24</td>
<td>92.6</td>
<td>37.0</td>
<td>168.4</td>
<td>21.8</td>
<td>50.8</td>
<td>389.4</td>
<td>13.6</td>
<td>42.9</td>
<td>70.9</td>
<td>71.4</td>
<td>195.0</td>
<td>51.3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2023-02-27</td>
<td>92.8</td>
<td>37.2</td>
<td>169.0</td>
<td>21.8</td>
<td>50.9</td>
<td>390.8</td>
<td>13.6</td>
<td>43.0</td>
<td>70.9</td>
<td>71.3</td>
<td>195.7</td>
<td>51.8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2023-02-28</td>
<td>92.8</td>
<td>37.0</td>
<td>169.8</td>
<td>21.9</td>
<td>50.8</td>
<td>389.3</td>
<td>13.7</td>
<td>43.0</td>
<td>70.6</td>
<td>71.3</td>
<td>195.0</td>
<td>51.4</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
</section>
<section id="normalisation" class="level3">
<h3 class="anchored" data-anchor-id="normalisation">Normalisation</h3>
<p>A table like the above is not very useful: in the absence a of particle knowledge of the ETFs’ values, we have no way of knowing if a value is “high” or “low”, hence apart from telling us that the value is a number we have now way to let’s try to make this table a bit more insightful.</p>
<p>The request above delivered a data_frame, and here is a snapshot of the last 5 rows:</p>
<div id="cell-11" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Same table, but this time, normalised</span></span>
<span id="cb5-3">(df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">AGG</th>
<th data-quarto-table-cell-role="th">EEM</th>
<th data-quarto-table-cell-role="th">GLD</th>
<th data-quarto-table-cell-role="th">GOVT</th>
<th data-quarto-table-cell-role="th">IJH</th>
<th data-quarto-table-cell-role="th">IVV</th>
<th data-quarto-table-cell-role="th">PDBC</th>
<th data-quarto-table-cell-role="th">SCHA</th>
<th data-quarto-table-cell-role="th">SCHD</th>
<th data-quarto-table-cell-role="th">VCLT</th>
<th data-quarto-table-cell-role="th">VTI</th>
<th data-quarto-table-cell-role="th">VXUS</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2023-02-24</td>
<td>102.4</td>
<td>88.9</td>
<td>135.0</td>
<td>100.9</td>
<td>150.7</td>
<td>161.5</td>
<td>144.7</td>
<td>137.1</td>
<td>176.8</td>
<td>102.1</td>
<td>158.2</td>
<td>110.3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2023-02-27</td>
<td>102.7</td>
<td>89.4</td>
<td>135.5</td>
<td>100.9</td>
<td>151.0</td>
<td>162.1</td>
<td>144.7</td>
<td>137.4</td>
<td>176.8</td>
<td>102.0</td>
<td>158.7</td>
<td>111.4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2023-02-28</td>
<td>102.7</td>
<td>88.9</td>
<td>136.2</td>
<td>101.4</td>
<td>150.7</td>
<td>161.5</td>
<td>145.7</td>
<td>137.4</td>
<td>176.1</td>
<td>102.0</td>
<td>158.2</td>
<td>110.5</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<p>This is <strong>much</strong> better.</p>
<p>Now we can at least see that: - <strong>US Equities</strong> (e.g.&nbsp;IVV) had a <strong>fantastic ride since 2015</strong>; - Government bonds (e.g.&nbsp;GOVT) under-performed; - Commodities (PDBC) and Gold (GLD) had several rough years as well, with recent massive pick-up in the current geopolitical context.</p>
</section>
<section id="visualise-asset-classes-returns" class="level3">
<h3 class="anchored" data-anchor-id="visualise-asset-classes-returns">Visualise asset classes’ returns</h3>
<p>Being able to sanity check the data is very important, and it’s often more efficient with a quick chart.</p>
<div id="cell-13" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalise to 100</span></span>
<span id="cb6-4">normalised_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A bit of data wrangling</span></span>
<span id="cb6-7">transposed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalised_data.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).reset_index().transpose()</span>
<span id="cb6-8">transposed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transposed_data.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(transposed_data)]</span>
<span id="cb6-9">transposed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transposed_data.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Last Value"</span>})</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We want a bar chart sorted by decreaseing values</span></span>
<span id="cb6-12">transposed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transposed_data.sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Last Value"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Theming Seaborn results</span></span>
<span id="cb6-15">sns.set_theme()</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw</span></span>
<span id="cb6-18">transposed_data.plot.bar(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="draw-the-wealth-curve" class="level3">
<h3 class="anchored" data-anchor-id="draw-the-wealth-curve">Draw the <strong>wealth curve</strong></h3>
<p>The table above is useful, but when it comes to grasping and long term risks and returns, a chart is worth a thousand words.</p>
<p>A very common issue when charting multiple time series is the very different stock levels, and this can make the chart hard to read.</p>
<p>This is why we will once again normalise the data.</p>
<div id="cell-15" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Theming Seaborn results</span></span>
<span id="cb7-4">sns.set_theme()</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the time series</span></span>
<span id="cb7-7">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Legends and Axis titles</span></span>
<span id="cb7-10">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>normalised_data)</span>
<span id="cb7-11">p.set_ylabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Close Price, Basis 100 in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="estimate-risk-and-return" class="level2">
<h2 class="anchored" data-anchor-id="estimate-risk-and-return">Estimate risk and return</h2>
<p>In <u>Markowitz 1952</u>, the optimal portfolio is obtained as a function of <em>expected</em> returns and <em>expected</em> risks of the portfolio. This takes a strong assumption that we have a “crystal ball”, or at least access to a predictive model, which at this stage is well beyond this article.</p>
<p>For this first example, we will rely on historical parameters estimation, which precisely means that we expect the past to be a good prediction of what might happen in the future.</p>
<section id="volatility" class="level3">
<h3 class="anchored" data-anchor-id="volatility">Volatility</h3>
<p>There are many ways to estimate the volatility, and I will only cover the simplest approach.</p>
<p>We have access to daily close prices of the ETFs, hence we could look at the standard deviation of <strong>daily</strong> returns. In theory this would utilise most of the data we have access to, which is a good thing. In practice, and especially when looking at asset classes which can be observed with an <strong>8 to 12 hours</strong> time difference which might lead the “sample volatility” to become inconsistent between 2 asset classes. This is even more important for estimating the <strong>correlation</strong>.</p>
<p>Practitioners often use <strong>weekly returns</strong> to alleviate this issue, and we will do the same here, and as such calculate the returns using a <em>resampled</em> time series. To calculate the <strong>annualized volatility</strong> requires an additional factor in this case the square root of 52. Why this?</p>
<p>Volatility is essential to option traders, and when pricing options, practitioners often model asset prices as <strong>Wiener processes</strong>(number of weeks in a year) <sup>3</sup>. The variance of a Wiener process is proportional to the time, and the volatility is the square root of the the variance, which gives us that to convert standard deviation of weekly returns into an <em>annualized</em> figure, we need to multiply our results by the square root of the number of weeks in a year.</p>
<div id="cell-19" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">weekly_returns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.resample(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"W"</span>).last().pct_change()</span>
<span id="cb8-2">((weekly_returns.std()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).sort_values()).plot.bar()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As one could have guessed, on the left of the chart above, we can find the low volatility asset classes (e.g.&nbsp;Government Bonds, Investment Grade Bonds), whereas on the right we have high volatility asset classes (Mid Cap and Small Cap Equities).</p>
</section>
</section>
<section id="correlation" class="level2">
<h2 class="anchored" data-anchor-id="correlation">Correlation</h2>
<div id="cell-22" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">sns.heatmap(weekly_returns.corr())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-23" class="cell" data-slideshow="{&quot;slide_type&quot;:&quot;skip&quot;}" data-tags="[]" data-execution_count="10">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pypfopt <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> risk_models</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pypfopt <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotting</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate expected returns and sample covariance</span></span>
<span id="cb10-6">mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expected_returns.mean_historical_return(df)</span>
<span id="cb10-7">sample_cov <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> risk_models.sample_cov(df, frequency<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> risk_models.CovarianceShrinkage(df).ledoit_wolf()</span></code></pre></div>
</details>
</div>
</section>
<section id="the-main-results-efficient-frontier-maximum-sharpe-portfolio" class="level2">
<h2 class="anchored" data-anchor-id="the-main-results-efficient-frontier-maximum-sharpe-portfolio">The main results: Efficient Frontier &amp; Maximum Sharpe Portfolio</h2>
<section id="calculate-and-draw-the-efficient-frontier" class="level3">
<h3 class="anchored" data-anchor-id="calculate-and-draw-the-efficient-frontier">Calculate and draw the efficient frontier</h3>
<p>With expected returns and risk estimated, we are ready to utilise PyPortfolioOpt’s optimiser to draw the <strong>efficient frontier</strong>.</p>
<p>The idea behind the efficient frontier is relatively simple: - For <strong>each level of investor’s risk</strong>, there is an optimal portfolio which is expected to deliver the <strong>highest level of return</strong>; or conversely - For <strong>each level of investor’s return</strong>, there is an optimal portfolio which is expected to deliver the <strong>lowest level of return</strong>.</p>
<div id="cell-25" class="cell" data-slideshow="{&quot;slide_type&quot;:&quot;skip&quot;}" data-tags="[]" data-execution_count="11">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb11-2">ef <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EfficientFrontier(mu, sample_cov)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We create 2 efficient frontiers</span></span>
<span id="cb11-5">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb11-6">plotting.plot_efficient_frontier(ef, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, show_assets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-7">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asset Classes &amp; Efficient Frontier"</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-the-maximum-sharpe-portfolio" class="level3">
<h3 class="anchored" data-anchor-id="add-the-maximum-sharpe-portfolio">Add the Maximum Sharpe portfolio</h3>
<div id="cell-28" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find and plot the tangency portfolio</span></span>
<span id="cb12-4">fig2, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb12-5">ef2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EfficientFrontier(mu, S) </span>
<span id="cb12-6">plotting.plot_efficient_frontier(ef2, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, show_assets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-7"></span>
<span id="cb12-8">ef3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EfficientFrontier(mu, S) </span>
<span id="cb12-9"></span>
<span id="cb12-10">ef3.max_sharpe()</span>
<span id="cb12-11">ret_tangent, std_tangent, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ef3.portfolio_performance()</span>
<span id="cb12-12">ax.scatter(std_tangent, ret_tangent, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max Sharpe"</span>)</span>
<span id="cb12-13">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asset Classes, Efficient Frontier &amp; Max Sharpe portfolio"</span>)</span>
<span id="cb12-14">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="calculate-random-portfolios" class="level3">
<h3 class="anchored" data-anchor-id="calculate-random-portfolios">Calculate random portfolios</h3>
<div id="cell-30" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot random portfolios</span></span>
<span id="cb13-4">fig2, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb13-5">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb13-6">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.dirichlet(np.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mu)), n_samples)</span>
<span id="cb13-7">rets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w.dot(mu)</span>
<span id="cb13-8">stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt((w.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w.T)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb13-9">sharpes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stds</span>
<span id="cb13-10">ax.scatter(stds, rets, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sharpes, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viridis_r"</span>)</span>
<span id="cb13-11"></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format</span></span>
<span id="cb13-13">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random portfolios, based on the same asset classes"</span>)</span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ax.legend()</span></span>
<span id="cb13-15">plt.tight_layout()</span>
<span id="cb13-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Et voila!</p>
<p>Compared to macros or Excel formulas, this is an amazing improvement, and enables us to customise everything in seconds: historical timeframe, asset classes, etc.</p>
<p>To deliver a full portfolio optimisation process in such a limited number of lines is truly awesome.</p>
<p>I hope this article provided you some ideas on how to look at portfolio construction.</p>
<p>Happy coding, and happy portfolio construction!</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://www.jstor.org/stable/2975974">Portfolio Selection</a>, Henri Markowitz, 1952↩︎</p></li>
<li id="fn2"><p><a href="https://pyportfolioopt.readthedocs.io/en/latest/">PyportfolioOpt</a>, Robert Andrew Martin, 2018↩︎</p></li>
<li id="fn3"><p><a href="https://en.wikipedia.org/wiki/Wiener_process">Wikipedia.com / Wiener Processes</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>portfolio-construction</category>
  <guid>https://portfolio-geek.com/posts/portfolio-construction/optimise-portfolios-with-python.html</guid>
  <pubDate>Tue, 30 Apr 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up a Python Development Workstation (Windows)</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/tutorials/en/setting-up-a-python-workstation-windows.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome, fellow data enthusiasts and future quants! Today, we embark on an exciting journey to set up a coding environment that bridges the gap between mathematical theory and the practical world of finance. Whether you’re a student stepping into the field or a practitioner eager to enhance your skills, this guide is your first step towards mastering quantitative finance with Python. Let’s demystify the process and make it enjoyable together.</p>
</section>
<section id="general-setup" class="level2">
<h2 class="anchored" data-anchor-id="general-setup">1 General Setup</h2>
<section id="setting-up-chocolatey" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-chocolatey">1.1 Setting Up Chocolatey</h3>
<p>Open an administrator PowerShell and execute:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Set-ExecutionPolicy</span> Bypass <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Scope</span> Process <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Force</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[System.Net.ServicePointManager]::SecurityProtocol</span> = <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">System.Net.ServicePointManager</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>::SecurityProtocol <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-bor</span> 3072<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">iwr</span> https://chocolatey.org/install.ps1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-UseBasicParsing</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">iex</span></span></code></pre></div>
</section>
<section id="setting-up-powershell-visual-studio-code-and-miniconda" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-powershell-visual-studio-code-and-miniconda">1.2 Setting Up Powershell, Visual Studio Code, and Miniconda</h3>
<p><strong>Why this trio?</strong> Powershell for a superior shell experience, Visual Studio Code (VS Code) for its versatility as a code editor, and Miniconda for managing our Python environments efficiently.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install Zsh, VS Code, and Miniconda</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">choco</span> install vscode miniconda3 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p>To setup the conda integration for Powershell, once a powershell windows is opened, you can type <code>conda init</code>, this will enable an easier monitoring of the virtual environment.</p>
</section>
</section>
<section id="visual-studio-code-setup-installing-key-visual-studio-extensions" class="level2">
<h2 class="anchored" data-anchor-id="visual-studio-code-setup-installing-key-visual-studio-extensions">2. Visual Studio Code Setup: Installing Key Visual Studio Extensions</h2>
<p>VS Code shines with its extensions. Here are a few that will make your life easier:</p>
<ul>
<li><p><strong>Python</strong>: Gives you a host of Python-specific features like linting, debugging, code formatting, and more.</p></li>
<li><p><strong>Prettier</strong>: A code formatter that supports many languages, including Python. Keeps your code clean and professional.</p></li>
<li><p><strong>Code Spell Checker</strong>: Like a proof-reader, it catches common spelling mistakes in your code.</p></li>
</ul>
<p>You can install these extensions by searching for them in the VS Code Extensions view (<code>Ctrl + Shift + X</code>) and clicking on “Install”.</p>
</section>
<section id="create-a-conda-virtual-environment" class="level2">
<h2 class="anchored" data-anchor-id="create-a-conda-virtual-environment">3: Create a Conda Virtual Environment</h2>
<p><strong>Why a virtual environment?</strong> It allows us to create isolated spaces for our projects, ensuring that our dependencies are managed neatly, without conflicts.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the virtual environment</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> portfolio-geek python=3.12 jupyterlab <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate portfolio-geek</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install matplotlib</span></code></pre></div>
</section>
<section id="step-4-building-a-simple-matplotlib-chart-in-visual-studio" class="level2">
<h2 class="anchored" data-anchor-id="step-4-building-a-simple-matplotlib-chart-in-visual-studio">Step 4: Building a Simple Matplotlib Chart in Visual Studio</h2>
<p>We need to start somewhere! Let’s create a Notebook file (extension <code>.ipynb</code>) within Visual Studio and let’s type the following code.</p>
<div id="cell-6" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure you're in the 'portfolio-geek' environment</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb4-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-8">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(x)</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting</span></span>
<span id="cb4-11">plt.plot(x, y)</span>
<span id="cb4-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simple Sine Wave Plot"</span>)</span>
<span id="cb4-13">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X axis"</span>)</span>
<span id="cb4-14">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y axis"</span>)</span>
<span id="cb4-15">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/tutorials/en/setting-up-a-python-workstation-windows_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Et Voila! The first chart in our journey to Python coding.</p>
<section id="recap-and-conclusion" class="level3">
<h3 class="anchored" data-anchor-id="recap-and-conclusion">Recap and Conclusion</h3>
<p>Congratulations! You’ve set up a robust coding environment for your journey into quantitative finance and data analysis. Today, we’ve installed essential tools with Chocolatey, created an isolated workspace with Conda, and dipped our toes into the world of data visualization with Matplotlib.</p>
<p><strong>Why is this important?</strong> This setup not only equips you with the technical skills needed in the field but also instills confidence to explore complex financial models and datasets.</p>
<p>As we progress, remember that the journey is as rewarding as the destination. Keep experimenting, and don’t hesitate to dive deeper into each tool and library we discussed.</p>
</section>
<section id="further-reading-and-resources" class="level3">
<h3 class="anchored" data-anchor-id="further-reading-and-resources">Further Reading and Resources</h3>
<ul>
<li><strong>Books:</strong>
<ul>
<li>“Python for Finance” by Yves Hilpisch</li>
<li>“Python for Data Analysis” by Wes McKinney</li>
</ul></li>
<li><strong>Websites:</strong>
<ul>
<li><a href="https://docs.python.org/3/">Official Python Documentation</a></li>
<li><a href="https://matplotlib.org/stable/tutorials/index.html">Matplotlib Tutorials</a></li>
</ul></li>
<li><strong>Awesome Python GitHub Repositories:</strong>
<ul>
<li><a href="https://github.com/wilsonfreitas/awesome-quant">Awesome Quant</a></li>
<li><a href="https://github.com/lballabio/QuantLib">QuantLib</a></li>
</ul></li>
</ul>
<p>This structure offers a blend of instructional content and hands-on coding, making it accessible for beginners while providing enough depth for more experienced learners. The tone is kept light and encouraging, aiming to demystify the complexities of setting up a quantitative finance coding environment.</p>


</section>
</section>

 ]]></description>
  <category>101</category>
  <category>en</category>
  <category>setup</category>
  <category>bash</category>
  <category>python</category>
  <category>windows</category>
  <category>matplotlib</category>
  <guid>https://portfolio-geek.com/posts/tutorials/en/setting-up-a-python-workstation-windows.html</guid>
  <pubDate>Thu, 22 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/posts/tutorials/en/pictures/high-tech-programming-office-with-workstations.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Setting up a Python Development Workstation (MacOs)</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/tutorials/en/setting-up-a-python-workstation-macos.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Ready to enter the world of Python, Visual Studio, and financial analysis? Let’s embark on this journey together. By the end of this guide, you’ll have your finance lab all set for dissecting market trends, optimising portfolios, and much more. Buckle up, let’s set sail! This article requires some knowledge of the terminal, installing softwares</p>
</section>
<section id="step-1-install-your-general-tooling" class="level2">
<h2 class="anchored" data-anchor-id="step-1-install-your-general-tooling">Step 1: Install Your General Tooling</h2>
<p>Whilst not mandatory, before looking at Python, code editors and various libraries, it’s extremely useful to check that your MacOs is ready to provide you with the best general setup. Terminal windows, bash script might look a bit obscure at first glance, but take it step by step and look at the video linked below to get more clarity on this. This is a marathon, definitely not a sprint.</p>
<section id="install-homebrew" class="level3">
<h3 class="anchored" data-anchor-id="install-homebrew">1.1 Install Homebrew</h3>
<p>Homebrew, affectionately known as brew, is the Swiss Army knife for installing software on macOS. It simplifies the process of managing software on your Mac, making it a breeze to install, uninstall, and update your applications.</p>
<p>To install Homebrew, open Terminal and enter:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/bin/bash</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c&nbsp;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</section>
<section id="install-iterm2" class="level3">
<h3 class="anchored" data-anchor-id="install-iterm2">1.2 Install iTerm2</h3>
<p>iTerm2 is an improvement over macOS’s default terminal, offering features such as split panes, search, and customisation. Install it via brew with:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> iterm2</span></code></pre></div>
</section>
<section id="install-oh-my-zsh" class="level3">
<h3 class="anchored" data-anchor-id="install-oh-my-zsh">1.3 Install Oh My Zsh:</h3>
<p>Zsh, combined with Oh My Zsh, turns the dull default terminal into a powerful and enjoyable tool, complete with themes, plugins, and a vibrant community.</p>
<p>Install Oh My Zsh with:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c&nbsp;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>::: {.content-visible unless-profile=“presentation”}</p>
</section>
</section>
<section id="step-2.-setting-up-visual-studio-and-miniconda" class="level2">
<h2 class="anchored" data-anchor-id="step-2.-setting-up-visual-studio-and-miniconda">Step 2. Setting Up Visual Studio and Miniconda</h2>
<section id="visual-studio" class="level3">
<h3 class="anchored" data-anchor-id="visual-studio">2.1 Visual Studio</h3>
<p>Visual Studio Code (VS Code) is a lightweight but powerful source code editor that supports debugging, embedded Git control, syntax highlighting, and more. Install VS Code via brew:</p>
<p>VS Code is a robust and versatile code editor, while Miniconda, a mini version of Anaconda, allows us to create isolated Python environments and manage packages.</p>
<p>Using Brew, installed above, is a breeze</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> visual-studio-code</span></code></pre></div>
<p>Alternatively, you can download and install Visual Studio Code from the <a href="https://code.visualstudio.com/">official website</a>. Follow the prompts to complete the installation process.</p>
</section>
<section id="miniconda" class="level3">
<h3 class="anchored" data-anchor-id="miniconda">2.2 Miniconda</h3>
<p>Using Brew</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> miniconda</span></code></pre></div>
<p>Alternatively, you can download and install Miniconda from the <a href="https://docs.conda.io/en/latest/miniconda.html">official website</a>. During installation, ensure that you select the option to “Add Miniconda to my PATH environment variable”. This allows you to use <code>conda</code> commands directly in the VS Code terminal.</p>
</section>
</section>
<section id="step-3.-setting-up-a-python-virtual-environment" class="level2">
<h2 class="anchored" data-anchor-id="step-3.-setting-up-a-python-virtual-environment">Step 3. Setting Up a Python Virtual Environment</h2>
<section id="create-the-conda-environment" class="level3">
<h3 class="anchored" data-anchor-id="create-the-conda-environment">3.1 Create the Conda environment</h3>
<p>With our tools installed, let’s now create a virtual environment to house our finance lab. We’ll use conda to create a new environment named <code>portfolio-geek</code> using Python 3.10.</p>
<p>Open <code>VS Code</code>, then open a terminal and type the following command:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> portfolio-geek python=3.10</span></code></pre></div>
<p>Activate the <code>portfolio-geek</code> environment by typing:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate portfolio-geek</span></code></pre></div>
</section>
<section id="install-the-key-packages-for-your-coding-journey" class="level3">
<h3 class="anchored" data-anchor-id="install-the-key-packages-for-your-coding-journey">3.2 Install the key packages for your coding journey</h3>
<p>Inside <code>portfolio-geek</code>, we install several vital Python libraries for our financial analysis journey:</p>
<ul>
<li><p><strong>pandas</strong>: A flexible and powerful data manipulation library, essential for handling and processing financial data.</p></li>
<li><p><strong>matplotlib and seaborn</strong>: Two formidable libraries for data visualisation, because finance isn’t just about numbers—it’s about insightful charts too!</p></li>
<li><p><strong>yfinance</strong>: An effective library for fetching historical stock data from Yahoo Finance.</p></li>
<li><p><strong>pyportfolioopt</strong>: An advanced library designed to optimise portfolios, calculate risk and returns, and much more.</p></li>
</ul>
<p>Install these libraries using the following command:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install pandas matplotlib seaborn yfinance pyportfolioopt</span></code></pre></div>
</section>
<section id="step-4.-installing-key-visual-studio-extensions" class="level3">
<h3 class="anchored" data-anchor-id="step-4.-installing-key-visual-studio-extensions">Step 4. Installing Key Visual Studio Extensions</h3>
<p>This step is not mandatory but it will be of tremendous help on a day to day basis. VS Code shines with its extensions. Here are a few that will make your life easier:</p>
<ul>
<li><p><strong>Python</strong>: Gives you a host of Python-specific features like linting, debugging, code formatting, and more.</p></li>
<li><p><strong>Prettier</strong>: A code formatter that supports many languages, including Python. Keeps your code clean and professional.</p></li>
<li><p><strong>Code Spell Checker</strong>: Like a proof-reader, it catches common spelling mistakes in your code.</p></li>
</ul>
<p>You can install these extensions by searching for them in the VS Code Extensions view (<code>Ctrl + Shift + X</code>) and clicking on “Install”.</p>
</section>
</section>
<section id="step-5-launching-a-jupyter-notebook-inside-visual-studio" class="level2">
<h2 class="anchored" data-anchor-id="step-5-launching-a-jupyter-notebook-inside-visual-studio">Step 5 Launching a Jupyter Notebook Inside Visual Studio</h2>
<p>With our <code>portfolio-geek</code> environment and VS Code set up, it’s time to dive into some coding. We’ll be using a Jupyter Notebook, a powerful tool allowing you to interweave code and text into a single document.</p>
<p>Create a new file with a <code>.ipynb</code> extension. Upon creation, VS Code will prompt you to select a Python interpreter—choose the one corresponding to our <code>portfolio-geek</code> environment.</p>
<div id="cell-8" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure you're in the 'portfolio-geek' environment</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb9-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb9-8">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(x)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting</span></span>
<span id="cb9-11">plt.plot(x, y)</span>
<span id="cb9-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simple Sine Wave Plot"</span>)</span>
<span id="cb9-13">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X axis"</span>)</span>
<span id="cb9-14">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y axis"</span>)</span>
<span id="cb9-15">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/tutorials/en/setting-up-a-python-workstation-macos_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>101</category>
  <category>en</category>
  <category>setup</category>
  <category>python</category>
  <category>bash</category>
  <category>macos</category>
  <category>matplotlib</category>
  <guid>https://portfolio-geek.com/posts/tutorials/en/setting-up-a-python-workstation-macos.html</guid>
  <pubDate>Tue, 20 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/posts/tutorials/en/pictures/high-tech-programming-office-with-workstations.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Getting and charting data with Matplotlib</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/tutorials/en/spy-and-matplotlib.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to the second episode of our Python and Quantitative Finance tutorial, where we will enter in our real Python journey.</p>
<p>In this first coding exercise, things will be very simple, we will essentially look at the past performance of a financial tool, an ETF. This ETF is called the SPY, it’s a US domiciled ETF that aims to replicate the performance of the S&amp;P 500 Index<sup>1</sup>, one of the key indices to measure the performance of the US Equity market.</p>
</section>
<section id="import-libraries" class="level2">
<h2 class="anchored" data-anchor-id="import-libraries">Import Libraries</h2>
<p>First, we import necessary libraries. yfinance will fetch the data, and matplotlib will help us chart it.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> yfinance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> yf</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</details>
</div>
</section>
<section id="download-spy-data" class="level1">
<h1>Download SPY Data</h1>
<p>Fetching historical data for the SPY ETF is straightforward with yfinance. We’ll grab the last five years of daily data.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">spy_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yf.download(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SPY'</span>, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015-01-01'</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020-01-01'</span>, progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</details>
</div>
<p>It’s easy to show the results of this request with the code below, using the function <code>tail(n)</code> that essentially gathers the last <code>n</code> row of the <code>spy_data</code> dataframe that has been generated by the <code>download</code> function of the the <code>yfinance</code> library.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">spy_data.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Open</th>
<th data-quarto-table-cell-role="th">High</th>
<th data-quarto-table-cell-role="th">Low</th>
<th data-quarto-table-cell-role="th">Close</th>
<th data-quarto-table-cell-role="th">Adj Close</th>
<th data-quarto-table-cell-role="th">Volume</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2019-12-24</td>
<td>321.470001</td>
<td>321.519989</td>
<td>320.899994</td>
<td>321.230011</td>
<td>299.739136</td>
<td>20270000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2019-12-26</td>
<td>321.649994</td>
<td>322.950012</td>
<td>321.640015</td>
<td>322.940002</td>
<td>301.334717</td>
<td>30911200</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2019-12-27</td>
<td>323.739990</td>
<td>323.799988</td>
<td>322.279999</td>
<td>322.859985</td>
<td>301.260071</td>
<td>42528800</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2019-12-30</td>
<td>322.950012</td>
<td>323.100006</td>
<td>320.549988</td>
<td>321.079987</td>
<td>299.599152</td>
<td>49729100</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2019-12-31</td>
<td>320.529999</td>
<td>322.130005</td>
<td>320.149994</td>
<td>321.859985</td>
<td>300.326996</td>
<td>57077300</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<p>The function <code>tail</code> comes out of the <code>pandas</code> library, which is probably the most powerful library <sup>2</sup> I have seen in the last 2 decades!</p>
<p>Going through the details of this library is well beyond the scope of this article but will we will discover step by step of its most useful functions.</p>
</section>
<section id="plotting-the-data" class="level1">
<h1>Plotting the Data</h1>
<p>With our data in hand, let’s plot the closing prices. Here, the choice of a green and blue stylesheet makes our chart not only informative but visually appealing.</p>
<div id="cell-9" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default settings</span></span>
<span id="cb4-2">mpl.rcParams.update(mpl.rcParamsDefault)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use a ggplot stylesheet</span></span>
<span id="cb4-5">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot"</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7">spy_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close'</span>].plot(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SPY ETF Performance 2015-2020'</span>)</span>
<span id="cb4-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>)</span>
<span id="cb4-11">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close Price'</span>)</span>
<span id="cb4-12">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/tutorials/en/spy-and-matplotlib_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="why-this-matters" class="level3">
<h3 class="anchored" data-anchor-id="why-this-matters">Why This Matters</h3>
<p>This exercise is a primer in the practical application of Python for financial analysis. By fetching real-world data and visualizing it, we gain insights into market trends and ETF performance over time. This skill is fundamental in quantitative finance, where data-driven decisions are paramount.</p>
</section>
<section id="recap-and-further-reading" class="level3">
<h3 class="anchored" data-anchor-id="recap-and-further-reading">Recap and Further Reading</h3>
<p>Today, we’ve covered how to set up your Python environment, fetch financial data using yfinance, and visualize it with matplotlib. These steps are building blocks in your journey into quantitative finance and data analysis.</p>
<p>For those keen to delve deeper, consider exploring the following resources:</p>
<ul>
<li><strong>Books</strong>: “Python for Finance” by Yves Hilpisch, “Quantitative Finance For Dummies” by Steve Bell.</li>
<li><strong>Websites</strong>: Quantopian, QuantConnect, and the matplotlib documentation.</li>
<li><strong>GitHub Repositories</strong>: matplotlib/matplotlib, ranaroussi/yfinance.</li>
</ul>
<p>Stay curious, and happy coding!</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For more information on the S&amp;P 500 Index, you can look at this <a href="https://en.wikipedia.org/wiki/S%26P_500">Wikipedia article</a>.↩︎</p></li>
<li id="fn2"><p>For more information on the <code>pandas</code> library, look at its <a href="https://pandas.pydata.org/">reference website</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>tutorial</category>
  <category>data</category>
  <category>matplotlib</category>
  <category>en</category>
  <guid>https://portfolio-geek.com/posts/tutorials/en/spy-and-matplotlib.html</guid>
  <pubDate>Thu, 25 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://portfolio-geek.com/posts/tutorials/en/chart_spy.png" medium="image" type="image/png" height="85" width="144"/>
</item>
<item>
  <title>Visualising Historical Data</title>
  <dc:creator>Vincent D.</dc:creator>
  <link>https://portfolio-geek.com/posts/publication-workflow/visualizing-historical-data.html</link>
  <description><![CDATA[ 




<p><img src="https://portfolio-geek.com/pictures/chart-preview.png" class="img-fluid"></p>
<section id="visualizing-historical-data" class="level1">
<h1>Visualizing historical data</h1>
<blockquote class="blockquote">
<p>“A quick introduction on how to gather data using Python, Pandas and Pandas_DataReader in order to easily gather historical times from Yahoo Finance.”</p>
</blockquote>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>To start our data analysis and portfolio construction journey, we will perform the basic - but essential - task of <strong>getting access</strong> to <strong>time series</strong> and plot them using pandas.</p>
<blockquote class="blockquote">
<p>Tip: This article is written as a Jupyter Notebook. It has been published using <a href="https://portfolio-geek.com/blogging/publishing/workflow/2022/03/06/write-articles-with-jupyter-fastpages.html">Fastpages</a>. The Jupyter notebook is available on GitHub and if you want to, you can run it directly using the provided Binder link displayed at the top of the article.</p>
</blockquote>
</section>
<section id="load-libraries" class="level2">
<h2 class="anchored" data-anchor-id="load-libraries">Load libraries</h2>
<p>A key benefit of <strong>Python</strong> is the sheer number of libraries we can leverage to perform a particular task. Choosing the right library might look a bit overwhelming, and one the goals of this blog is actually to provide the reader my honest view on what makes most sense to perform the usual tasks in my daily work.</p>
<p>The key module for this article is <strong><a href="https://github.com/ranaroussi/yfinance">yfinance</a></strong>, a fantastic data gathering library that you can find <a href="https://github.com/ranaroussi/yfinance">here</a> on GitHub.</p>
<div id="cell-3" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> yfinance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> yf</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dt</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note that this change the decimals places inside Jupyter, but not on the website</span></span>
<span id="cb1-8">pd.options.display.float_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span></span></code></pre></div>
</details>
</div>
</section>
<section id="get-historical-data" class="level2">
<h2 class="anchored" data-anchor-id="get-historical-data">Get historical data</h2>
<p>Let’s get ready, and gather some historical data for, say, 4 <strong>Exchange Traded Funds</strong> (ie “ETFs”, still commonly referred to as “trackers” in France): - SPY: <strong>S&amp;P 500</strong> - GLD: <strong>Gold</strong> - AGG: <strong>US Aggregate (US Bonds)</strong> - CAC.PA: <strong>CAC 40 (French Equity Index)</strong></p>
<p>You might wonder what the first 3 letters actually correspond to? They are the usual identifier for each ETF on the markets, and are often called the <strong>ticker</strong>of the ETF.</p>
<p>To gather data, you must <em>de facto</em> provide one ticker for each security, but if you forgot the ticker, Google is usually your friend!</p>
<p>We will need define to find a few more <strong>parameters</strong>: - The 2 variables start_date and end_date to keep some flexibility, - The variable <em>tickers</em> will store our ticker list, and pass it as a parameter to Yahoo, in order to specify our query.</p>
<div id="cell-5" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015-01-01'</span></span>
<span id="cb2-4">end_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-05-14'</span></span>
<span id="cb2-5">tickers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SPY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GLD'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AGG'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAC.PA'</span>]</span>
<span id="cb2-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yf.download(tickers,  start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>start_date, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>end_date)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This ones keep the decimals to one on the website. </span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is especially useful to print dataframes.</span></span>
<span id="cb2-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-11"></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[                       0%                       ][                       0%                       ][                       0%                       ][*********************100%***********************]  4 of 4 completed</code></pre>
</div>
</div>
</section>
<section id="visual-data-check" class="level2">
<h2 class="anchored" data-anchor-id="visual-data-check">Visual data check</h2>
<p>By default, Yahoo Finance provides us with several fields, not all of them will be useful in this introduction, and we will perform some further filtering below.</p>
<p>To quickly check the status of what we now have, note the use of the <strong>tail()</strong> function below.</p>
<p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.tail.html">Pandas tail() function</a></p>
<div id="cell-7" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">df.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th colspan="4" data-quarto-table-cell-role="th" data-halign="left">Adj Close</th>
<th colspan="4" data-quarto-table-cell-role="th" data-halign="left">Close</th>
<th colspan="2" data-quarto-table-cell-role="th" data-halign="left">High</th>
<th data-quarto-table-cell-role="th">...</th>
<th colspan="2" data-quarto-table-cell-role="th" data-halign="left">Low</th>
<th colspan="4" data-quarto-table-cell-role="th" data-halign="left">Open</th>
<th colspan="4" data-quarto-table-cell-role="th" data-halign="left">Volume</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">AGG</th>
<th data-quarto-table-cell-role="th">CAC.PA</th>
<th data-quarto-table-cell-role="th">GLD</th>
<th data-quarto-table-cell-role="th">SPY</th>
<th data-quarto-table-cell-role="th">AGG</th>
<th data-quarto-table-cell-role="th">CAC.PA</th>
<th data-quarto-table-cell-role="th">GLD</th>
<th data-quarto-table-cell-role="th">SPY</th>
<th data-quarto-table-cell-role="th">AGG</th>
<th data-quarto-table-cell-role="th">CAC.PA</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">GLD</th>
<th data-quarto-table-cell-role="th">SPY</th>
<th data-quarto-table-cell-role="th">AGG</th>
<th data-quarto-table-cell-role="th">CAC.PA</th>
<th data-quarto-table-cell-role="th">GLD</th>
<th data-quarto-table-cell-role="th">SPY</th>
<th data-quarto-table-cell-role="th">AGG</th>
<th data-quarto-table-cell-role="th">CAC.PA</th>
<th data-quarto-table-cell-role="th">GLD</th>
<th data-quarto-table-cell-role="th">SPY</th>
</tr>
<tr class="header">
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2022-05-11</td>
<td>96.1</td>
<td>59.1</td>
<td>172.8</td>
<td>379.5</td>
<td>102.8</td>
<td>62.6</td>
<td>172.8</td>
<td>392.8</td>
<td>102.8</td>
<td>62.6</td>
<td>...</td>
<td>172.2</td>
<td>392.0</td>
<td>102.1</td>
<td>61.7</td>
<td>172.5</td>
<td>398.1</td>
<td>16,462,000.0</td>
<td>45,387.0</td>
<td>9,179,600.0</td>
<td>142,361,000.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2022-05-12</td>
<td>96.3</td>
<td>58.5</td>
<td>170.2</td>
<td>379.1</td>
<td>103.0</td>
<td>62.0</td>
<td>170.2</td>
<td>392.3</td>
<td>103.1</td>
<td>62.3</td>
<td>...</td>
<td>169.9</td>
<td>385.1</td>
<td>102.9</td>
<td>61.4</td>
<td>172.1</td>
<td>389.4</td>
<td>9,015,300.0</td>
<td>62,497.0</td>
<td>11,626,800.0</td>
<td>125,090,800.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2022-05-13</td>
<td>95.9</td>
<td>60.0</td>
<td>168.8</td>
<td>388.1</td>
<td>102.5</td>
<td>63.5</td>
<td>168.8</td>
<td>401.7</td>
<td>102.8</td>
<td>63.5</td>
<td>...</td>
<td>168.0</td>
<td>395.6</td>
<td>102.8</td>
<td>62.4</td>
<td>168.3</td>
<td>396.7</td>
<td>6,715,600.0</td>
<td>77,603.0</td>
<td>13,031,100.0</td>
<td>104,174,400.0</td>
</tr>
</tbody>
</table>

<p>3 rows × 24 columns</p>
</div>
</div>
</div>
</div>
<p>The <strong>Adjusted Close</strong> field is returned by Yahoo Finance and is exactly what we are looking for.</p>
<p>Adjusted Close corresponds to the time series containing what we usually call the <em>total return</em>, typically <strong>compounding the dividends</strong> with the <strong>price returns</strong>.</p>
<p>This reflects the total return delivered by the ETF, should the investor reinvest systematically the dividend paid by the ETF by buying more this ETF. This is probably the most useful field when we aim to assess the <strong>long term returns of an asset class</strong>.</p>
<p>To quickly check the status of what we now have, note the use of the <strong>tail()</strong> function below, which get the last <em>n</em> rows of the dataset. Combined with Jupyter’s power in printing data, it’s probably the fastest way to navigate and check a particular dataset.</p>
<p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.tail.html">Pandas tail() function</a></p>
<div id="cell-9" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adj Close'</span>].tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">AGG</th>
<th data-quarto-table-cell-role="th">CAC.PA</th>
<th data-quarto-table-cell-role="th">GLD</th>
<th data-quarto-table-cell-role="th">SPY</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2022-05-11</td>
<td>96.1</td>
<td>59.1</td>
<td>172.8</td>
<td>379.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2022-05-12</td>
<td>96.3</td>
<td>58.5</td>
<td>170.2</td>
<td>379.1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2022-05-13</td>
<td>95.9</td>
<td>60.0</td>
<td>168.8</td>
<td>388.1</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
</section>
<section id="plot-the-raw-time-series-using-the-seaborn-library" class="level2">
<h2 class="anchored" data-anchor-id="plot-the-raw-time-series-using-the-seaborn-library">Plot the raw time series using the seaborn library</h2>
<p>To quickly check that we got the right data, let’s visualise it.</p>
<div id="cell-11" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the default theme</span></span>
<span id="cb6-5">sns.set_style(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'whitegrid'</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-8">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adj Close'</span>])</span>
<span id="cb6-9">p.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Close Price"</span>)</span>
<span id="cb6-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/publication-workflow/visualizing-historical-data_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="plot-the-normalised-the-time-series" class="level2">
<h2 class="anchored" data-anchor-id="plot-the-normalised-the-time-series">Plot the normalised the time series</h2>
<p>The chart above is useful, but the vast difference between the ETFs’ values makes it a bit hard to actually track each respective time series.</p>
<p>It would be more effective to <strong>normalise the data</strong>. It’s often referred to as “rebasing”, ie making each time series starting at 100, this will make it much easier to compare.</p>
<div id="cell-13" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalise the data, which here means for each column to start at 100, with subsequent price development "scaled" according to daily returns</span></span>
<span id="cb7-4">normalised_ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adj Close'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adj Close'</span>].iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb7-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-6">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>normalised_ts)</span>
<span id="cb7-7">p.set_ylabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Close Price, Basis 100 in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/publication-workflow/visualizing-historical-data_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="rolling-window-cumulated-returns" class="level2">
<h2 class="anchored" data-anchor-id="rolling-window-cumulated-returns">Rolling window cumulated returns</h2>
<p>It’s often easy to get ‘seduced’ by the compelling long term returns, especially about Equities. And indeed, it was a good thing to be invested in Equities in the long run !</p>
<p>But 1y returns are usually a good way to keep track of the portfolio, and moreover to see how these returns have developed over time. With a 1y return chart, the notion of risk, ie either fast-changing returns, or - even worse - consistently negative returns, quickly becomes apparent.</p>
<div id="cell-15" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We use pct_change() to calculate the one year return</span></span>
<span id="cb8-2">ts_1y_returns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adj Close'</span>].pct_change(periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>)</span>
<span id="cb8-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-4">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ts_1y_returns)</span>
<span id="cb8-5">p.set_ylabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Close Price, Basis 100 in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/publication-workflow/visualizing-historical-data_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="smoother-returns" class="level2">
<h2 class="anchored" data-anchor-id="smoother-returns">Smoother returns</h2>
<p>The chart above is great, but a bit too busy for my taste. Whilst accurate, there is too much info going on, the noise might reduce our ability to spot real medium terms or breakouts.</p>
<p>This is where <strong>pandas</strong> starts to be really powerful. The <em>rolling()</em> function essentially captures sub-series, with a defined length (here 21 days). By <em>chaining</em> the results of rolling() with the <em>mean</em> function, ie calculating the arithmetic average, this will provide us in a one-liner with a new series. This generated dataframe contains the time series of the moving average (21 days) for each of our time series.</p>
<p>Whilst this “chaining” approach might initially sound obscure, this is <strong>extremely powerful</strong>, especially when factoring in the fact that you just need to change the tickers of the ETFs in the beginning of the article to entirely update the whole analysis … your turn!</p>
<div id="cell-17" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalise the data, which here means for each column to start at 100, with subsequent price development "scaled" according to daily returns</span></span>
<span id="cb9-2">ts_1y_returns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adj Close'</span>].pct_change(periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>).rolling(window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>).mean()</span>
<span id="cb9-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb9-4">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ts_1y_returns)</span>
<span id="cb9-5">p.set_ylabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Close Price, Basis 100 in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://portfolio-geek.com/posts/publication-workflow/visualizing-historical-data_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>So that’s it for this short intro on data gathering and visualising. In this article, we have gathered, checked, normalised and plot close prices for different ETFs.</p>
<p>The next step will be to use these function to generate some returns and risk statistics, and start exploring portfolio construction.</p>
<p>See you in the next article, and stay safe.</p>
</section>
<section id="useful-related-links" class="level2">
<h2 class="anchored" data-anchor-id="useful-related-links">Useful Related Links</h2>
<p>{% series_list %}</p>
<p>There is no such thing as “full tutorial on something”, <strong>knowledge is everywhere</strong>. I found these tutorials pretty handy, check them out too!</p>
<ul>
<li><a href="http://seaborn.pydata.org/introduction.html#:~:text=Seaborn%20is%20a%20library%20for,explore%20and%20understand%20your%20data.">Seaborn Tutorial</a></li>
<li><a href="https://www.datacamp.com/community/tutorials/f-string-formatting-in-python">Tutorial on F-Strings</a></li>
</ul>


</section>
</section>

 ]]></description>
  <category>publication-workflow</category>
  <guid>https://portfolio-geek.com/posts/publication-workflow/visualizing-historical-data.html</guid>
  <pubDate>Fri, 03 Mar 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
