[
  {
    "objectID": "risk_and_return.html",
    "href": "risk_and_return.html",
    "title": "Estimating Risk and Return",
    "section": "",
    "text": "Estimating risks and returns is probably the most important - and the most difficult - topic in quantitative finance. There are plenty of approaches to tackle it.\nBelow is a series of articles delving into various approaches and techniques to analyse time series and estimating risk and returns. This list will be augmented over time.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "all_posts.html",
    "href": "all_posts.html",
    "title": "All Posts",
    "section": "",
    "text": "14 July 2024: Economics, Indexing, Quant and Coding Links\n\n\n\n\n\n\n\n\n\n\n\nJul 14, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n15 July 2024: daily curation with Market, Tech and Quant Links\n\n\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n16 July 2024: Asset Management, Economics and ETFs in Focus\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n17 July 2024: Daily Curation with Asset Management, Coding and Economics in Focus\n\n\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n18 July 2024: Automation, Quant and Tech in Focus\n\n\n\n\n\n\n\n\n\n\n\nJul 18, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n19 July 2024: Daily selection of Quant, Finance and Coding links\n\n\n\n\n\n\n\n\n\n\n\nJul 19, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nBitcoin’s Safe-Haven Status, GPT-4o Mini’s Launch, and Mastering AI Content: Today’s Key Insights\n\n\n\n\n\n\n\n\n\n\n\nJul 20, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nGetting and charting data with Matplotlib\n\n\n\n\n\n\ntutorial\n\n\ndata\n\n\nmatplotlib\n\n\nen\n\n\n\nIn this article, we start our data analysis journey with Python by getting and charting data, in this case the performance of an ETF using freely available data.\n\n\n\n\n\nJan 25, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nPortfolio optimisation with Python\n\n\n\n\n\n\nportfolio-construction\n\n\n\n\n\n\n\n\n\nMay 1, 2023\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up a Python Development Workstation (MacOs)\n\n\n\n\n\n\n101\n\n\nen\n\n\nsetup\n\n\npython\n\n\nbash\n\n\nmacos\n\n\nmatplotlib\n\n\n\nIn this article, we start our journey into Finance and Python coding. Let’s set up our MacOs Workstation and install a few key tools to code efficiently.\n\n\n\n\n\nFeb 20, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up a Python Development Workstation (Windows)\n\n\n\n\n\n\n101\n\n\nen\n\n\nsetup\n\n\nbash\n\n\npython\n\n\nwindows\n\n\nmatplotlib\n\n\n\nIn this article we set up our Windows workstation and install all the relevant tools to be efficient in coding in Python.\n\n\n\n\n\nFeb 22, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nVisualising Historical Data\n\n\n\n\n\n\npublication-workflow\n\n\n\n\n\n\n\n\n\nMar 3, 2023\n\n\nVincent D.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Portfolio Geek",
    "section": "",
    "text": "With 20+ years of experience in portfolio construction, asset allocation and quantitative research, I have worked across the entire asset management and financial markets value chain.\nIn this blog, I document my findings and experiments, notably in Python, Jupyter and along themes like portfolio optimisation and reproducible research.\nIn particular, this section provides you with a Zero to Hero experience in Python and Quantitative Finance."
  },
  {
    "objectID": "index.html#welcome-to-portfolio-geek",
    "href": "index.html#welcome-to-portfolio-geek",
    "title": "Portfolio Geek",
    "section": "",
    "text": "With 20+ years of experience in portfolio construction, asset allocation and quantitative research, I have worked across the entire asset management and financial markets value chain.\nIn this blog, I document my findings and experiments, notably in Python, Jupyter and along themes like portfolio optimisation and reproducible research.\nIn particular, this section provides you with a Zero to Hero experience in Python and Quantitative Finance."
  },
  {
    "objectID": "data-driven-minute.html",
    "href": "data-driven-minute.html",
    "title": "Data Driven Minutes",
    "section": "",
    "text": "Vincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVincent D.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/daily-curation/2024-07-16_daily-curation.html",
    "href": "posts/daily-curation/2024-07-16_daily-curation.html",
    "title": "16 July 2024: Asset Management, Economics and ETFs in Focus",
    "section": "",
    "text": "Here are the findings of the day.\nHappy reading!\nVincent\n\nAsset Management\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nAsset Manager Profit Margins Get Thinner\nCasey Quirk\nAsset managers face declining profit margins despite rising markets, driven by increased operating costs and weak inflows, prompting a focus on alternative investments for growth and adaptation.\n\n\nIndex Investing as an Active Decision: Implications for Fixed Income Investors\nNorthern Trust Asset Management.\nPassive investing in fixed income has evolved, offering customization, precision, and better risk management, despite challenges like liquidity and replication concerns, attracting more investments than active strategies.\n\n\nThe Growth Of Tech And 25 Years Of Nasdaq Futures (Nasdaq Global Indices:NDX)\nSeeking Alpha\nE-mini Nasdaq-100 futures, launched in 1999, have grown substantially in volume, reflecting the importance of technology stocks and risk management in today’s market landscape.\n\n\n\n\n\nEconomics\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nShips Fleeing the Red Sea Now Face Perilous African Weather\nBloomberg\nShips near South Africa face severe weather, causing container losses and delays. Many vessels are diverting routes to avoid risk from Houthi militants in the Red Sea.\n\n\nFastest wage growth over the last four years\nEconomic Policy Institute\nLow-wage workers experienced significant wage growth of 12.1% from 2019 to 2023, driven by policy responses and a tight labor market, marking a departure from historical trends.\n\n\n\n\n\nETF and Index Investing\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nThe Cornerstones of Benchmarking Private Capital\nMSCI\nBenchmarking private capital requires accurate data, defined inclusion criteria, and a strong governance framework to measure performance through various index types and calculations effectively.\n\n\n\n\n\nFundamental\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nAsset Manager Profit Margins Get Thinner\nInstitutional Investor.\nAsset managers face declining profit margins due to rising costs, weak inflows, and the need for innovation despite a strong stock market. Strategic adaptation is essential for future success.\n\n\nEurope’s luxury stocks have boomed in the last decade*\nSherwood\nBurberry’s first-quarter results showed a 22% revenue drop, CEO resignation, dividend suspension, and declining sales, prompting challenges for the new CEO amidst declining brand exclusivity and market presence.\n\n\nIndia’s Markets Have Changed\nMSCI\nIndia’s equity market shows significant growth, with over 300 new companies since 2020, highlighting changes in industry profiles and future potential from private market entrants.\n\n\nS&P 500 Will Likely Report Earnings Growth of At Least 12% For Q2\nFactSet\nS&P 500 expected to report earnings growth above 12% for Q2, supported by historical trends of exceeding estimates, with 81% of companies reporting higher EPS so far.\n\n\n\n\n\nKnowledge Management\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nIn a sea of disinformation, why is Wikipedia so accurate?\nThe Garden of Forking Paths\nWikipedia has over 6.8 million articles, providing accurate information amid online disinformation, with a reliable citation system that allows users to verify sources and find obscure knowledge.\n\n\n\n\n\nPortfolio Construction\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nBlackrock CEO Larry Fink Explains Why Everyone Should Consider Bitcoin in Portfolios – Finance Bitcoin News\nBitcoin.com\nLarry Fink, Blackrock’s CEO, now views bitcoin as “digital gold,” advocating for its inclusion in portfolios as a hedge against economic instability and currency debasement.\n\n\nMarkets in Focus: Currency Risk Higher for Global Equity Investors\nMarkets in Focus\nCurrency volatility has influenced global markets, with mixed equity returns and rising currency risk for investors, particularly in Japan, amidst ongoing rate uncertainties since 2022.\n\n\n\n\n\nQuantitative Investing\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nS&P Momentum Indices Leading the Pack – Indexology® Blog\nIndexology\nS&P Momentum Indices have outperformed benchmarks over the past year, utilizing a methodology based on risk-adjusted price momentum, with notable contributions from sectors like Information Technology and Industrials.\n\n\n\n\n\nTech\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nHow the World Sped Up\nThe Garden of Forking Paths\nThe essay explores the accelerated pace of change in modern society, highlighting how speed impacts information dissemination, financial markets, and the risks associated with rapid technological advancements."
  },
  {
    "objectID": "posts/daily-curation/2024-07-15_daily-curation.html",
    "href": "posts/daily-curation/2024-07-15_daily-curation.html",
    "title": "15 July 2024: daily curation with Market, Tech and Quant Links",
    "section": "",
    "text": "Here are the findings of the day.\nHappy reading!\nVincent\n\nMarket Pulse\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nThese Three Investments Are Getting Ready to Be Jerome Powell’s Favorite\nMoney Morning\nThe Fed’s potential interest rate cuts may boost small cap stocks, regional banks, and real estate, prompting a significant market shift and attracting investors seeking higher returns.\n\n\nWhen Will the Yield Curve “Un”Invert?\nWisdomTree’s website\nThe UST yield curve’s potential “un”inversion timing hinges on Fed rate cuts, with the UST 2-Year/10-Year spread likely reversing before the UST 3-Month/10-Year spread.\n\n\nMoat Stocks Steady Amid Tech’s Market Surge\nMoat Index Quarterly Review\nMoat Index reviews revealed a contrarian bias towards large caps, reduced Financials exposure, and increased allocations in Consumer Staples, Industrials, and Technology, remaining underweight in growth stocks.\n\n\nThe Automatic Investing Revolution - A Wealth of Common Sense\nA Wealth of Common Sense\nThe shift to automatic retirement savings, like higher default rates, improves participation and investor behavior, positively affecting stock market valuations while highlighting the limitations of defined contribution plans.\n\n\nThis Bullish Trend in Banks Is Just Starting\nMoney Morning\nThe banking sector shows potential recovery as interest rates may soon lower, with investor sentiment shifting and earnings reports exceeding expectations, presenting buying opportunities in ETFs like KBE and KRE.\n\n\n\n\n\nTech\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nCrypto owners know Crypto…but not finance\nAlpha Architect\nA study reveals Bitcoin owners have higher crypto literacy than non-owners, but financial literacy remains weak. Gender gaps persist, highlighting the need for enhanced financial education on cryptocurrencies.\n\n\n\n\n\nQuantitative Investing\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nDiversification for Trend Following Models\nAlgorithmic Advantage\nDiversification in trend following allows capturing outlier events, enhancing portfolio performance despite asset correlations, challenging traditional limits of diversification and emphasizing the importance of uncorrelated trade results.\n\n\nA portfolio of strategies - by Quantitativo\nQuant Trading Rules\nCombining mean reversion and improved momentum strategies optimizes risk-adjusted returns, leveraging diversification principles to reduce drawdowns and enhance portfolio performance through uncorrelated asset mixing.\n\n\n\n\n\nEconomics\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nThe New York Fed DSGE Model Forecast—June 2024\nFederal Reserve Bank of New York\nThe New York Fed’s DSGE model forecasts higher core PCE inflation at 2.7% and lower output growth at 1.0% for 2024, attributing changes to cost-push shocks and monetary policy.\n\n\nSavvy Shoppers Await Prime Week Deal Competition\nLSEG Workspace\nAmazon’s Prime Week prompts retailers to offer competitive discounts, aiming to attract value-oriented shoppers while facing inflation, with increased online discount penetration and evolving consumer preferences.\n\n\n\n\n\nFundamental\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nOne of the stock market’s most consistent trends\nTKer\nStocks are at record highs as Q2 earnings season begins, with companies likely to beat estimates by about 5%. Analysts maintain positive outlooks despite recession risks being elevated.\n\n\nIs This Time Different? Small-Cap Stocks Finally Perking Up\nETF Trends\nQQQJ ETF, targeting Nasdaq Next Generation 100, includes promising tech stocks like Zoom, NICE, and Paylocity, offering growth opportunities in a market dominated by mega-cap equities.\n\n\n\n\n\nPortfolio Construction\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nA Balanced Portfolio Always Comes with Regrets\nNone\nA balanced portfolio, while providing stability, often leads to regrets as market performance varies. Diversification reduces risk but can’t predict future outcomes, emphasizing the importance of a long-term strategy."
  },
  {
    "objectID": "posts/daily-curation/2024-07-19_daily-curation.html",
    "href": "posts/daily-curation/2024-07-19_daily-curation.html",
    "title": "19 July 2024: Daily selection of Quant, Finance and Coding links",
    "section": "",
    "text": "Here is what we found most interesting on 19 July 2024. Today, 3 links caught our attention in particular.\nHappy reading,\nVincent\n\nMarket Feed\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nShort Sellers Hate That These Stocks Are Moving Higher\nTraders Reserve\nInvestors are moving away from large cap stocks as the Fed is likely to drop interest rates, causing a shift in sentiment. This is creating short squeeze opportunities in small cap stocks. Some short squeeze candidates include the S&P Biotech ETF(XBI), Chevron (CVX), and Royal Caribbean Cruise Lines (RCL).\n\n\n\n\n\nPortfolio Construction\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nWhy is the stock-bond correlation important\nDisciplined Systematic Global Macro Views\nThe correlation between stocks and bonds is historically negative, providing diversification. However, this correlation can change over time, leading to increased portfolio risk. Investors should regularly reassess their asset allocation.\n\n\nThe Impact of Amortizing Volatility across Private Investments\nAlpha Architect\nPrivate capital managers have discretion in valuing their portfolios, which results in smoother returns and understated volatility. Failure to consider lagged betas leads to underestimating risk and overestimating alpha. Mark Anson’s study found that private investments exhibit significant serial correlation at the quarterly level and that lagged betas account for a significant amount of returns associated with private capital alpha. Adjusting for lagged betas leads to lower allocations and drops in Sharpe ratios. It is important for investors to properly account for systemic risk in private assets by including estimates of lagged betas."
  },
  {
    "objectID": "posts/daily-curation/2024-07-17_daily-curation.html",
    "href": "posts/daily-curation/2024-07-17_daily-curation.html",
    "title": "17 July 2024: Daily Curation with Asset Management, Coding and Economics in Focus",
    "section": "",
    "text": "Here are the findings of the day.\nHappy reading!\nVincent\n\nAsset Management\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nHow Much Money You Need For Retirement\nA Wealth of Common Sense\nThe 4% rule and 25x rule provide retirement planning frameworks, but individual circumstances may necessitate more savings for a greater safety margin against uncertainties.\n\n\n\n\n\nCoding\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nHow to trade a covered call with Alpaca (the easy way)\nAlpaca\nCreate an Alpaca account, set up Python with the Alpaca library, and use the API to execute trades for covered calls, managing positions effectively.\n\n\nQuickly make a trading strategy with a 82% win rate\nQuantifiable Edges\nPandas in Python enables quick trading strategy testing with an 82% win rate by analyzing historical data, identifying 3-day losing streaks, and calculating future returns.\n\n\nPortfolio Hedging with Put Options\nRobot Wealth\nThis post discusses portfolio hedging using put options to limit downside risk, including examples, calculating beta, and considerations of risk tolerance and trading edge when hedging strategies.\n\n\nPython Protocols: Leveraging Structural Subtyping\nTowards Data Science\nProtocols in Python enable structural subtyping, allowing type checking without inheritance. They enhance type hints for static duck typing, improving code flexibility, readability, and reliability.\n\n\n\n\n\nEconomics\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nUnexpected Economist: Carl Linnaeus on Economic Theory\nConversable Economist\nCarl Linnaeus viewed economics as essential for well-being, favored mercantilism, endorsed self-sufficiency, and believed all nations possessed natural resources for economic flourishing, despite his obsession with gold.\n\n\nRecession Probabilities for June 2025\nNBER\nRecession probabilities for June 2025 indicate varied outcomes based on models, showing 60% likelihood with basic indicators and 20% with additional debt measures, reflecting declining debt-service ratios.\n\n\nYield Curve Control Means The Party Can Continue, What’s Not To Love?\nClimateer Investing\nCentral banks disguise risk through yield curve control, preventing bond yields from rising and perpetuating economic stagnation, resulting in more debt and inefficient allocation of resources.\n\n\n\n\n\nFundamental\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nChina Economic Sentiment\nEconbrowser\nTorsten Slok’s China analysis highlights real estate market collapse effects, featuring graphs illustrating economic challenges, emphasizing a constant narrative in interpreting China’s economic statistics.\n\n\n\n\n\nPortfolio Construction\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nPragmatic Asset Allocation from Vojtko and Javorská of Quantpedia\nQuantpedia\nPragmatic Asset Allocation is a tactical strategy focusing on tax efficiency, trading based on yield curve inversion, and adjusting asset allocation quarterly for optimal performance.\n\n\nCan we please stop selling these products\nKlement on Investing\nStructured products are illiquid, high-fee investments that underperform traditional portfolios, providing minimal risk reduction while diminishing returns, making them unworthy for investors.\n\n\nCommodities for the Long Run?\nCFA Institute Research Foundation\nCommodities may appear inefficient short-term but offer significant benefits in long-term portfolios, especially against inflation, warranting reevaluation of their role in investment strategies.\n\n\nManaged Futures versus Market-Neutral Multi-Factor Investing\nFinomial\nManaged futures and market-neutral multi-factor investing both provide uncorrelated returns, but their performance trends exhibit significant similarities, limiting diversification benefits when combined in portfolios.\n\n\nCommodities for the Long Run?\nCFA Institute Research\nCommodities show improved portfolio efficiency over longer horizons, especially during inflation, suggesting significant optimal allocations when considering real returns as opposed to nominal returns.\n\n\nClassifying hedge fund strategies once again\nDisciplined Systematic Macro Views\nManaged futures excel during market drawdowns, offering strong alpha, low beta, and diversification benefits, making them a valuable addition to investment portfolios for downside protection.\n\n\nWhen Rebalancing Creates Higher Returns-and When It Doesn’t\nMorningstar\nRebalancing can enhance portfolio returns when reallocating between divergent asset performances, but may not benefit portfolios with similar assets. Investors should evaluate performance dynamics before rebalancing.\n\n\n\n\n\nTech\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nGoldman Sachs Throws Cold Water on AI Mania\nGoldman Sachs\nGoldman Sachs critiques excessive AI investment, highlighting high costs, lack of significant breakthroughs, and other challenges like resource consumption and ethical issues, questioning the technology’s expected impact on productivity."
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-macos.html",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-macos.html",
    "title": "Setting up a Python Development Workstation (MacOs)",
    "section": "",
    "text": "Ready to enter the world of Python, Visual Studio, and financial analysis? Let’s embark on this journey together. By the end of this guide, you’ll have your finance lab all set for dissecting market trends, optimising portfolios, and much more. Buckle up, let’s set sail! This article requires some knowledge of the terminal, installing softwares"
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#introduction",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#introduction",
    "title": "Setting up a Python Development Workstation (MacOs)",
    "section": "",
    "text": "Ready to enter the world of Python, Visual Studio, and financial analysis? Let’s embark on this journey together. By the end of this guide, you’ll have your finance lab all set for dissecting market trends, optimising portfolios, and much more. Buckle up, let’s set sail! This article requires some knowledge of the terminal, installing softwares"
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#step-1-install-your-general-tooling",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#step-1-install-your-general-tooling",
    "title": "Setting up a Python Development Workstation (MacOs)",
    "section": "Step 1: Install Your General Tooling",
    "text": "Step 1: Install Your General Tooling\nWhilst not mandatory, before looking at Python, code editors and various libraries, it’s extremely useful to check that your MacOs is ready to provide you with the best general setup. Terminal windows, bash script might look a bit obscure at first glance, but take it step by step and look at the video linked below to get more clarity on this. This is a marathon, definitely not a sprint.\n\n1.1 Install Homebrew\nHomebrew, affectionately known as brew, is the Swiss Army knife for installing software on macOS. It simplifies the process of managing software on your Mac, making it a breeze to install, uninstall, and update your applications.\nTo install Homebrew, open Terminal and enter:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\n1.2 Install iTerm2\niTerm2 is an improvement over macOS’s default terminal, offering features such as split panes, search, and customisation. Install it via brew with:\nbrew install --cask iterm2\n\n\n1.3 Install Oh My Zsh:\nZsh, combined with Oh My Zsh, turns the dull default terminal into a powerful and enjoyable tool, complete with themes, plugins, and a vibrant community.\nInstall Oh My Zsh with:\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n::: {.content-visible unless-profile=“presentation”}"
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#step-2.-setting-up-visual-studio-and-miniconda",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#step-2.-setting-up-visual-studio-and-miniconda",
    "title": "Setting up a Python Development Workstation (MacOs)",
    "section": "Step 2. Setting Up Visual Studio and Miniconda",
    "text": "Step 2. Setting Up Visual Studio and Miniconda\n\n2.1 Visual Studio\nVisual Studio Code (VS Code) is a lightweight but powerful source code editor that supports debugging, embedded Git control, syntax highlighting, and more. Install VS Code via brew:\nVS Code is a robust and versatile code editor, while Miniconda, a mini version of Anaconda, allows us to create isolated Python environments and manage packages.\nUsing Brew, installed above, is a breeze\nbrew install --cask visual-studio-code\nAlternatively, you can download and install Visual Studio Code from the official website. Follow the prompts to complete the installation process.\n\n\n2.2 Miniconda\nUsing Brew\nbrew install --cask miniconda\nAlternatively, you can download and install Miniconda from the official website. During installation, ensure that you select the option to “Add Miniconda to my PATH environment variable”. This allows you to use conda commands directly in the VS Code terminal."
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#step-3.-setting-up-a-python-virtual-environment",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#step-3.-setting-up-a-python-virtual-environment",
    "title": "Setting up a Python Development Workstation (MacOs)",
    "section": "Step 3. Setting Up a Python Virtual Environment",
    "text": "Step 3. Setting Up a Python Virtual Environment\n\n3.1 Create the Conda environment\nWith our tools installed, let’s now create a virtual environment to house our finance lab. We’ll use conda to create a new environment named portfolio-geek using Python 3.10.\nOpen VS Code, then open a terminal and type the following command:\nconda create -n portfolio-geek python=3.10\nActivate the portfolio-geek environment by typing:\nconda activate portfolio-geek\n\n\n3.2 Install the key packages for your coding journey\nInside portfolio-geek, we install several vital Python libraries for our financial analysis journey:\n\npandas: A flexible and powerful data manipulation library, essential for handling and processing financial data.\nmatplotlib and seaborn: Two formidable libraries for data visualisation, because finance isn’t just about numbers—it’s about insightful charts too!\nyfinance: An effective library for fetching historical stock data from Yahoo Finance.\npyportfolioopt: An advanced library designed to optimise portfolios, calculate risk and returns, and much more.\n\nInstall these libraries using the following command:\nconda install pandas matplotlib seaborn yfinance pyportfolioopt\n\n\nStep 4. Installing Key Visual Studio Extensions\nThis step is not mandatory but it will be of tremendous help on a day to day basis. VS Code shines with its extensions. Here are a few that will make your life easier:\n\nPython: Gives you a host of Python-specific features like linting, debugging, code formatting, and more.\nPrettier: A code formatter that supports many languages, including Python. Keeps your code clean and professional.\nCode Spell Checker: Like a proof-reader, it catches common spelling mistakes in your code.\n\nYou can install these extensions by searching for them in the VS Code Extensions view (Ctrl + Shift + X) and clicking on “Install”."
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#step-5-launching-a-jupyter-notebook-inside-visual-studio",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-macos.html#step-5-launching-a-jupyter-notebook-inside-visual-studio",
    "title": "Setting up a Python Development Workstation (MacOs)",
    "section": "Step 5 Launching a Jupyter Notebook Inside Visual Studio",
    "text": "Step 5 Launching a Jupyter Notebook Inside Visual Studio\nWith our portfolio-geek environment and VS Code set up, it’s time to dive into some coding. We’ll be using a Jupyter Notebook, a powerful tool allowing you to interweave code and text into a single document.\nCreate a new file with a .ipynb extension. Upon creation, VS Code will prompt you to select a Python interpreter—choose the one corresponding to our portfolio-geek environment.\n\n\nCode\n# Ensure you're in the 'portfolio-geek' environment\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plotting\nplt.plot(x, y)\nplt.title(\"Simple Sine Wave Plot\")\nplt.xlabel(\"X axis\")\nplt.ylabel(\"Y axis\")\nplt.show()"
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#introduction",
    "href": "posts/publication-workflow/visualizing-historical-data.html#introduction",
    "title": "Visualising Historical Data",
    "section": "Introduction",
    "text": "Introduction\nTo start our data analysis and portfolio construction journey, we will perform the basic - but essential - task of getting access to time series and plot them using pandas.\n\nTip: This article is written as a Jupyter Notebook. It has been published using Fastpages. The Jupyter notebook is available on GitHub and if you want to, you can run it directly using the provided Binder link displayed at the top of the article."
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#load-libraries",
    "href": "posts/publication-workflow/visualizing-historical-data.html#load-libraries",
    "title": "Visualising Historical Data",
    "section": "Load libraries",
    "text": "Load libraries\nA key benefit of Python is the sheer number of libraries we can leverage to perform a particular task. Choosing the right library might look a bit overwhelming, and one the goals of this blog is actually to provide the reader my honest view on what makes most sense to perform the usual tasks in my daily work.\nThe key module for this article is yfinance, a fantastic data gathering library that you can find here on GitHub.\n\n\nCode\n#collapse-hide\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nimport yfinance as yf\nimport datetime as dt\n\n# Note that this change the decimals places inside Jupyter, but not on the website\npd.options.display.float_format = '{:,.1f}'.format"
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#get-historical-data",
    "href": "posts/publication-workflow/visualizing-historical-data.html#get-historical-data",
    "title": "Visualising Historical Data",
    "section": "Get historical data",
    "text": "Get historical data\nLet’s get ready, and gather some historical data for, say, 4 Exchange Traded Funds (ie “ETFs”, still commonly referred to as “trackers” in France): - SPY: S&P 500 - GLD: Gold - AGG: US Aggregate (US Bonds) - CAC.PA: CAC 40 (French Equity Index)\nYou might wonder what the first 3 letters actually correspond to? They are the usual identifier for each ETF on the markets, and are often called the tickerof the ETF.\nTo gather data, you must de facto provide one ticker for each security, but if you forgot the ticker, Google is usually your friend!\nWe will need define to find a few more parameters: - The 2 variables start_date and end_date to keep some flexibility, - The variable tickers will store our ticker list, and pass it as a parameter to Yahoo, in order to specify our query.\n\n\nCode\n#collapse-hide\n\nstart_date = '2015-01-01'\nend_date = '2022-05-14'\ntickers = ['SPY', 'GLD', 'AGG', 'CAC.PA']\ndf = yf.download(tickers,  start=start_date, end=end_date)\n\n# This ones keep the decimals to one on the website. \n# This is especially useful to print dataframes.\ndf = df.round(decimals=2)\n\n\n\n[                       0%                       ][                       0%                       ][                       0%                       ][*********************100%***********************]  4 of 4 completed"
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#visual-data-check",
    "href": "posts/publication-workflow/visualizing-historical-data.html#visual-data-check",
    "title": "Visualising Historical Data",
    "section": "Visual data check",
    "text": "Visual data check\nBy default, Yahoo Finance provides us with several fields, not all of them will be useful in this introduction, and we will perform some further filtering below.\nTo quickly check the status of what we now have, note the use of the tail() function below.\nPandas tail() function\n\n\nCode\ndf.tail(3)\n\n\n\n\n\n\n\n\n\n\nAdj Close\nClose\nHigh\n...\nLow\nOpen\nVolume\n\n\n\nAGG\nCAC.PA\nGLD\nSPY\nAGG\nCAC.PA\nGLD\nSPY\nAGG\nCAC.PA\n...\nGLD\nSPY\nAGG\nCAC.PA\nGLD\nSPY\nAGG\nCAC.PA\nGLD\nSPY\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022-05-11\n96.1\n59.1\n172.8\n379.5\n102.8\n62.6\n172.8\n392.8\n102.8\n62.6\n...\n172.2\n392.0\n102.1\n61.7\n172.5\n398.1\n16,462,000.0\n45,387.0\n9,179,600.0\n142,361,000.0\n\n\n2022-05-12\n96.3\n58.5\n170.2\n379.1\n103.0\n62.0\n170.2\n392.3\n103.1\n62.3\n...\n169.9\n385.1\n102.9\n61.4\n172.1\n389.4\n9,015,300.0\n62,497.0\n11,626,800.0\n125,090,800.0\n\n\n2022-05-13\n95.9\n60.0\n168.8\n388.1\n102.5\n63.5\n168.8\n401.7\n102.8\n63.5\n...\n168.0\n395.6\n102.8\n62.4\n168.3\n396.7\n6,715,600.0\n77,603.0\n13,031,100.0\n104,174,400.0\n\n\n\n\n3 rows × 24 columns\n\n\n\n\nThe Adjusted Close field is returned by Yahoo Finance and is exactly what we are looking for.\nAdjusted Close corresponds to the time series containing what we usually call the total return, typically compounding the dividends with the price returns.\nThis reflects the total return delivered by the ETF, should the investor reinvest systematically the dividend paid by the ETF by buying more this ETF. This is probably the most useful field when we aim to assess the long term returns of an asset class.\nTo quickly check the status of what we now have, note the use of the tail() function below, which get the last n rows of the dataset. Combined with Jupyter’s power in printing data, it’s probably the fastest way to navigate and check a particular dataset.\nPandas tail() function\n\n\nCode\ndf['Adj Close'].tail(3)\n\n\n\n\n\n\n\n\n\n\nAGG\nCAC.PA\nGLD\nSPY\n\n\nDate\n\n\n\n\n\n\n\n\n2022-05-11\n96.1\n59.1\n172.8\n379.5\n\n\n2022-05-12\n96.3\n58.5\n170.2\n379.1\n\n\n2022-05-13\n95.9\n60.0\n168.8\n388.1"
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#plot-the-raw-time-series-using-the-seaborn-library",
    "href": "posts/publication-workflow/visualizing-historical-data.html#plot-the-raw-time-series-using-the-seaborn-library",
    "title": "Visualising Historical Data",
    "section": "Plot the raw time series using the seaborn library",
    "text": "Plot the raw time series using the seaborn library\nTo quickly check that we got the right data, let’s visualise it.\n\n\nCode\n#collapse-hide\nimport seaborn as sns\n\n# Apply the default theme\nsns.set_style('whitegrid')\n\nplt.figure(figsize=(15,6))\np = sns.lineplot(data=df['Adj Close'])\np.set_ylabel(\"Close Price\")\npass"
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#plot-the-normalised-the-time-series",
    "href": "posts/publication-workflow/visualizing-historical-data.html#plot-the-normalised-the-time-series",
    "title": "Visualising Historical Data",
    "section": "Plot the normalised the time series",
    "text": "Plot the normalised the time series\nThe chart above is useful, but the vast difference between the ETFs’ values makes it a bit hard to actually track each respective time series.\nIt would be more effective to normalise the data. It’s often referred to as “rebasing”, ie making each time series starting at 100, this will make it much easier to compare.\n\n\nCode\n#collapse-hide\n\n# Normalise the data, which here means for each column to start at 100, with subsequent price development \"scaled\" according to daily returns\nnormalised_ts = (df['Adj Close']/df['Adj Close'].iloc[0, ]*100)\nplt.figure(figsize=(15,6))\np = sns.lineplot(data=normalised_ts)\np.set_ylabel(f\"Close Price, Basis 100 in {start_date}\")\npass"
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#rolling-window-cumulated-returns",
    "href": "posts/publication-workflow/visualizing-historical-data.html#rolling-window-cumulated-returns",
    "title": "Visualising Historical Data",
    "section": "Rolling window cumulated returns",
    "text": "Rolling window cumulated returns\nIt’s often easy to get ‘seduced’ by the compelling long term returns, especially about Equities. And indeed, it was a good thing to be invested in Equities in the long run !\nBut 1y returns are usually a good way to keep track of the portfolio, and moreover to see how these returns have developed over time. With a 1y return chart, the notion of risk, ie either fast-changing returns, or - even worse - consistently negative returns, quickly becomes apparent.\n\n\nCode\n# We use pct_change() to calculate the one year return\nts_1y_returns = df['Adj Close'].pct_change(periods=252)\nplt.figure(figsize=(15,6))\np = sns.lineplot(data=ts_1y_returns)\np.set_ylabel(f\"Close Price, Basis 100 in {start_date}\")\npass"
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#smoother-returns",
    "href": "posts/publication-workflow/visualizing-historical-data.html#smoother-returns",
    "title": "Visualising Historical Data",
    "section": "Smoother returns",
    "text": "Smoother returns\nThe chart above is great, but a bit too busy for my taste. Whilst accurate, there is too much info going on, the noise might reduce our ability to spot real medium terms or breakouts.\nThis is where pandas starts to be really powerful. The rolling() function essentially captures sub-series, with a defined length (here 21 days). By chaining the results of rolling() with the mean function, ie calculating the arithmetic average, this will provide us in a one-liner with a new series. This generated dataframe contains the time series of the moving average (21 days) for each of our time series.\nWhilst this “chaining” approach might initially sound obscure, this is extremely powerful, especially when factoring in the fact that you just need to change the tickers of the ETFs in the beginning of the article to entirely update the whole analysis … your turn!\n\n\nCode\n# Normalise the data, which here means for each column to start at 100, with subsequent price development \"scaled\" according to daily returns\nts_1y_returns = df['Adj Close'].pct_change(periods=252).rolling(window=21).mean()\nplt.figure(figsize=(15,6))\np = sns.lineplot(data=ts_1y_returns)\np.set_ylabel(f\"Close Price, Basis 100 in {start_date}\")\npass"
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#conclusion",
    "href": "posts/publication-workflow/visualizing-historical-data.html#conclusion",
    "title": "Visualising Historical Data",
    "section": "Conclusion",
    "text": "Conclusion\nSo that’s it for this short intro on data gathering and visualising. In this article, we have gathered, checked, normalised and plot close prices for different ETFs.\nThe next step will be to use these function to generate some returns and risk statistics, and start exploring portfolio construction.\nSee you in the next article, and stay safe."
  },
  {
    "objectID": "posts/publication-workflow/visualizing-historical-data.html#useful-related-links",
    "href": "posts/publication-workflow/visualizing-historical-data.html#useful-related-links",
    "title": "Visualising Historical Data",
    "section": "Useful Related Links",
    "text": "Useful Related Links\n{% series_list %}\nThere is no such thing as “full tutorial on something”, knowledge is everywhere. I found these tutorials pretty handy, check them out too!\n\nSeaborn Tutorial\nTutorial on F-Strings"
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#introduction",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#introduction",
    "title": "Portfolio optimisation with Python",
    "section": "Introduction",
    "text": "Introduction\nHarry Markowitz is one of the (if not “the”) fathers of modern portfolio construction and his seminal paper Portfolio Selection 1 has driven an entire research stream.\nThe intuition behind this paper is that one can combine the information gathered on expected returns, risks and diversification of various assets or asset classes with a view to optimise the risk-return profile of a given portfolio.\nIn practice, we typically find a limited stability of the portfolios generated using this approach, especially due the high sensitivity of the portfolio to the expected returns; nonetheless, the insights it provides are very useful and it’s a perfect start to see the impact of risk and diversification.\nFor this article, we will mostly rely on a fantastic Python library, PyPortfolioOpt 2 which will do the optimisation heavy lifting for us."
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#setup",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#setup",
    "title": "Portfolio optimisation with Python",
    "section": "Setup",
    "text": "Setup\n\nLoading Libraries\nThe main library to load here is indeed PyPortfolioOpt, and we will rely extensively on it in this article.\nWe need the following tools as well:\n\nPandas: load, filter, sort and pretty much all data wrangling operations;\nNumpy: provides most matrix and advanced numerical operations; this library is the calculation backbone for pandas;\nMatplotlib: the de facto reference library to draw scientific charts;\nyfinance: a very handy library to access many different online databases, including Yahoo Finance.\n\n\n\nCode\n#collapse-hide\nimport numpy as np \nimport pandas_datareader.data as web_reader\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nimport yfinance as yf\n\nfrom pypfopt.efficient_frontier import EfficientFrontier\nfrom pypfopt import risk_models\nfrom pypfopt import expected_returns\n\n\n\n\nMisc Parameters\nIn the code below, we set some variables to adjust the jupyter loo\n\n\nCode\n#collapse-hide\n# Note that this change the decimals places inside Jupyter, but not on the website\npd.options.display.float_format = '{:,.1f}'.format"
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#defining-our-investable-universe",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#defining-our-investable-universe",
    "title": "Portfolio optimisation with Python",
    "section": "Defining our Investable Universe",
    "text": "Defining our Investable Universe\nFirst and foremost, we need to define our Investable Universe i.e. the set of asset classes that we will allow in our portfolio.\nMany investors would typically think about single stocks, but on my side, I am typically looking I am looking here a Long Term Investing, and I would be keen to\nSpeaking about asset classes, we need some ETFs to analyse!\n\n“Important: Please bear in mind this article if purely for pedagogical purpose and should by no mean be understood as a recommendation or advice. Investing brings risk and in particular risk of loss of capital. I have no intention to recommend anything! I will follow among others this recent article in US News{% fn 7%} and ETF.com{% fn 8%} as sources of inspiration to identify relevant ETFs.”\n\n\nEquity\nLet’s start with various Equity sub-asset classes:\n\nIVV: iShares Core S&P 500 ETF representing US Equity Large Cap\nSCHA: Schwab U.S. Small-Cap ETF representing US Equity Small Cap\nIJH: iShares Core S&P Mid-Cap ETF representing US Equity Mid Cap\nSCHD: Schwab U.S. Dividend Equity ETF representing US Equity Dividend (ie US stocks which are deemed to pay higher dividends)\nVTI: Vanguard Total Stock Market ETF representing US Equity, with all market cap included\nVXUS: Vanguard Total International Stock ETF representing World ex-US equities\nEEM: iShares MSCI Emerging Markets ETF representing the Emerging Market Equities\n\n\n\nFixed Income\nLet’s add Fixed Income, which would typically aim to reduce the overall portfolio’s volatility:\n\nAGG: iShares Core U.S. Aggregate Bond ETFrepresenting the entire US Bond market\nGOVT: iShares U.S. Treasury Bond ETF representing the performance of US Government Bonds\nVCLT: Vanguard Long-Term Corporate Bond ETF representing the Investment Grade USD denominated bonds.\n\n\n\nAlternative Assets\nLet’s add 2 additional asset classes, Gold and Commodities:\n\nGLD: SPDR Gold Trust representing the price of **Gold\nPDBC: Invesco Optimum Yield Diversified Commodity Strategy No K-1 ETF** which will represent the performance of the Broad Commodities asset class\n\nEverything in the above is denominated in US Dollars, this will make our life easier in what follows, ie we will not need any currency conversion, which is always a bit painful in the process."
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#parameters-and-data-gathering",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#parameters-and-data-gathering",
    "title": "Portfolio optimisation with Python",
    "section": "Parameters and data gathering",
    "text": "Parameters and data gathering\nI recommend you to read this article about data gathering.\nLike we did in this article, we will utilise yfinance to get historical time series. As mentioned above, we will look at the performance of ETFs, which we will consider as as relevant proxies for their respective asset classes.\nYou can of course utilise whatever asset class you want, and take single stocks, funds as historical data points. On my side, I am quite familiar with indices ETFs, and I will go with the selection above.\nLast but not least, we need to define the start_date and end_date for gathering the historical time series. For this study, we will gather 7 years of data.\n\n\nCode\n#collapse-hide\n\nstart_date = '2018-03-01'\nend_date = '2023-03-01'\n\n# Define Investable Universe\ninvestable_universe_tickers = ['IVV', 'SCHA', 'IJH', 'SCHD', 'VTI', 'VXUS', 'EEM', 'VCLT', 'AGG', 'GOVT','PDBC','GLD']\n\n# Get Historical Data\ndf = yf.download(investable_universe_tickers, start=start_date, end=end_date, progress=False)\ndf = df['Adj Close']\n\n# This is required to round the blog's table into 2 decimals, Jupyter's formatting does not apply on the published website\ndf = df.round(decimals=1)\n\n\n\nData gathering: results\nThe request above delivered a pandas data_frame, and here is a snapshot of the last 5 rows:\n\n\nCode\n#collapse-hide\ndf.tail(3)\n\n\n\n\n\n\n\n\n\n\nAGG\nEEM\nGLD\nGOVT\nIJH\nIVV\nPDBC\nSCHA\nSCHD\nVCLT\nVTI\nVXUS\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2023-02-24\n92.6\n37.0\n168.4\n21.8\n50.8\n389.4\n13.6\n42.9\n70.9\n71.4\n195.0\n51.3\n\n\n2023-02-27\n92.8\n37.2\n169.0\n21.8\n50.9\n390.8\n13.6\n43.0\n70.9\n71.3\n195.7\n51.8\n\n\n2023-02-28\n92.8\n37.0\n169.8\n21.9\n50.8\n389.3\n13.7\n43.0\n70.6\n71.3\n195.0\n51.4\n\n\n\n\n\n\n\n\n\n\nNormalisation\nA table like the above is not very useful: in the absence a of particle knowledge of the ETFs’ values, we have no way of knowing if a value is “high” or “low”, hence apart from telling us that the value is a number we have now way to let’s try to make this table a bit more insightful.\nThe request above delivered a data_frame, and here is a snapshot of the last 5 rows:\n\n\nCode\n#collapse-hide\n# Same table, but this time, normalised\n(df/df.iloc[0, ]*100).round(decimals=1).tail(3)\n\n\n\n\n\n\n\n\n\n\nAGG\nEEM\nGLD\nGOVT\nIJH\nIVV\nPDBC\nSCHA\nSCHD\nVCLT\nVTI\nVXUS\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2023-02-24\n102.4\n88.9\n135.0\n100.9\n150.7\n161.5\n144.7\n137.1\n176.8\n102.1\n158.2\n110.3\n\n\n2023-02-27\n102.7\n89.4\n135.5\n100.9\n151.0\n162.1\n144.7\n137.4\n176.8\n102.0\n158.7\n111.4\n\n\n2023-02-28\n102.7\n88.9\n136.2\n101.4\n150.7\n161.5\n145.7\n137.4\n176.1\n102.0\n158.2\n110.5\n\n\n\n\n\n\n\n\nThis is much better.\nNow we can at least see that: - US Equities (e.g. IVV) had a fantastic ride since 2015; - Government bonds (e.g. GOVT) under-performed; - Commodities (PDBC) and Gold (GLD) had several rough years as well, with recent massive pick-up in the current geopolitical context.\n\n\nVisualise asset classes’ returns\nBeing able to sanity check the data is very important, and it’s often more efficient with a quick chart.\n\n\nCode\n#collapse-hide\n\n# Normalise to 100\nnormalised_data = (df/df.iloc[0, ]*100)\n\n# A bit of data wrangling\ntransposed_data = normalised_data.tail(1).reset_index().transpose()\ntransposed_data = transposed_data.iloc[1:len(transposed_data)]\ntransposed_data = transposed_data.rename(columns={0: \"Last Value\"})\n\n# We want a bar chart sorted by decreaseing values\ntransposed_data = transposed_data.sort_values(by=\"Last Value\", ascending=False)\n\n# Theming Seaborn results\nsns.set_theme()\n\n# Draw\ntransposed_data.plot.bar(figsize=(10, 6))\npass\n\n\n\n\n\n\n\n\n\n\n\nDraw the wealth curve\nThe table above is useful, but when it comes to grasping and long term risks and returns, a chart is worth a thousand words.\nA very common issue when charting multiple time series is the very different stock levels, and this can make the chart hard to read.\nThis is why we will once again normalise the data.\n\n\nCode\n#collapse-hide\n\n# Theming Seaborn results\nsns.set_theme()\n\n# Plot the time series\nplt.figure(figsize=(12,6))\n\n# Legends and Axis titles\np = sns.lineplot(data=normalised_data)\np.set_ylabel(f\"Close Price, Basis 100 in {start_date}\")\npass"
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#estimate-risk-and-return",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#estimate-risk-and-return",
    "title": "Portfolio optimisation with Python",
    "section": "Estimate risk and return",
    "text": "Estimate risk and return\nIn Markowitz 1952, the optimal portfolio is obtained as a function of expected returns and expected risks of the portfolio. This takes a strong assumption that we have a “crystal ball”, or at least access to a predictive model, which at this stage is well beyond this article.\nFor this first example, we will rely on historical parameters estimation, which precisely means that we expect the past to be a good prediction of what might happen in the future.\n\nVolatility\nThere are many ways to estimate the volatility, and I will only cover the simplest approach.\nWe have access to daily close prices of the ETFs, hence we could look at the standard deviation of daily returns. In theory this would utilise most of the data we have access to, which is a good thing. In practice, and especially when looking at asset classes which can be observed with an 8 to 12 hours time difference which might lead the “sample volatility” to become inconsistent between 2 asset classes. This is even more important for estimating the correlation.\nPractitioners often use weekly returns to alleviate this issue, and we will do the same here, and as such calculate the returns using a resampled time series. To calculate the annualized volatility requires an additional factor in this case the square root of 52. Why this?\nVolatility is essential to option traders, and when pricing options, practitioners often model asset prices as Wiener processes(number of weeks in a year) 3. The variance of a Wiener process is proportional to the time, and the volatility is the square root of the the variance, which gives us that to convert standard deviation of weekly returns into an annualized figure, we need to multiply our results by the square root of the number of weeks in a year.\n\n\nCode\nweekly_returns = df.resample(\"W\").last().pct_change()\n((weekly_returns.std()*math.sqrt(52)*100).sort_values()).plot.bar();\n\n\n\n\n\n\n\n\n\nAs one could have guessed, on the left of the chart above, we can find the low volatility asset classes (e.g. Government Bonds, Investment Grade Bonds), whereas on the right we have high volatility asset classes (Mid Cap and Small Cap Equities)."
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#correlation",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#correlation",
    "title": "Portfolio optimisation with Python",
    "section": "Correlation",
    "text": "Correlation\n\n\nCode\nsns.heatmap(weekly_returns.corr());\n\n\n\n\n\n\n\n\n\n\n\nCode\n#collapse-hide\nfrom pypfopt import risk_models\nfrom pypfopt import plotting\n\n# Calculate expected returns and sample covariance\nmu = expected_returns.mean_historical_return(df)\nsample_cov = risk_models.sample_cov(df, frequency=252)\n\nS = risk_models.CovarianceShrinkage(df).ledoit_wolf()"
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#the-main-results-efficient-frontier-maximum-sharpe-portfolio",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#the-main-results-efficient-frontier-maximum-sharpe-portfolio",
    "title": "Portfolio optimisation with Python",
    "section": "The main results: Efficient Frontier & Maximum Sharpe Portfolio",
    "text": "The main results: Efficient Frontier & Maximum Sharpe Portfolio\n\nCalculate and draw the efficient frontier\nWith expected returns and risk estimated, we are ready to utilise PyPortfolioOpt’s optimiser to draw the efficient frontier.\nThe idea behind the efficient frontier is relatively simple: - For each level of investor’s risk, there is an optimal portfolio which is expected to deliver the highest level of return; or conversely - For each level of investor’s return, there is an optimal portfolio which is expected to deliver the lowest level of return.\n\n\nCode\n#collapse-hide\nef = EfficientFrontier(mu, sample_cov)\n\n# We create 2 efficient frontiers\nfig, ax = plt.subplots()\nplotting.plot_efficient_frontier(ef, ax=ax, show_assets=True)\nax.set_title(\"Asset Classes & Efficient Frontier\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nAdd the Maximum Sharpe portfolio\n\n\nCode\n#collapse-hide\n\n# Find and plot the tangency portfolio\nfig2, ax = plt.subplots()\nef2 = EfficientFrontier(mu, S) \nplotting.plot_efficient_frontier(ef2, ax=ax, show_assets=True)\n\nef3 = EfficientFrontier(mu, S) \n\nef3.max_sharpe()\nret_tangent, std_tangent, _ = ef3.portfolio_performance()\nax.scatter(std_tangent, ret_tangent, marker=\"*\", s=100, c=\"r\", label=\"Max Sharpe\")\nax.set_title(\"Asset Classes, Efficient Frontier & Max Sharpe portfolio\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCalculate random portfolios\n\n\nCode\n#collapse-hide\n\n# Plot random portfolios\nfig2, ax = plt.subplots()\nn_samples = 10000\nw = np.random.dirichlet(np.ones(len(mu)), n_samples)\nrets = w.dot(mu)\nstds = np.sqrt((w.T * (S @ w.T)).sum(axis=0))\nsharpes = rets / stds\nax.scatter(stds, rets, marker=\".\", c=sharpes, cmap=\"viridis_r\")\n\n# Format\nax.set_title(\"Random portfolios, based on the same asset classes\")\n#ax.legend()\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#conclusion",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#conclusion",
    "title": "Portfolio optimisation with Python",
    "section": "Conclusion",
    "text": "Conclusion\nEt voila!\nCompared to macros or Excel formulas, this is an amazing improvement, and enables us to customise everything in seconds: historical timeframe, asset classes, etc.\nTo deliver a full portfolio optimisation process in such a limited number of lines is truly awesome.\nI hope this article provided you some ideas on how to look at portfolio construction.\nHappy coding, and happy portfolio construction!"
  },
  {
    "objectID": "posts/portfolio-construction/optimise-portfolios-with-python.html#footnotes",
    "href": "posts/portfolio-construction/optimise-portfolios-with-python.html#footnotes",
    "title": "Portfolio optimisation with Python",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPortfolio Selection, Henri Markowitz, 1952↩︎\nPyportfolioOpt, Robert Andrew Martin, 2018↩︎\nWikipedia.com / Wiener Processes↩︎"
  },
  {
    "objectID": "portfolio_construction.html",
    "href": "portfolio_construction.html",
    "title": "Portfolio Construction",
    "section": "",
    "text": "Estimating risks and returns is probably the most important - and the most difficult - topic in quantitative finance. There are plenty of approaches to tackle it.\nBelow is a series of articles delving into various approaches and techniques to analyse time series and estimating risk and returns. This list will be augmented over time.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPortfolio optimisation with Python\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2023\n\n\nVincent D.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-windows.html",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-windows.html",
    "title": "Setting up a Python Development Workstation (Windows)",
    "section": "",
    "text": "Welcome, fellow data enthusiasts and future quants! Today, we embark on an exciting journey to set up a coding environment that bridges the gap between mathematical theory and the practical world of finance. Whether you’re a student stepping into the field or a practitioner eager to enhance your skills, this guide is your first step towards mastering quantitative finance with Python. Let’s demystify the process and make it enjoyable together."
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#introduction",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#introduction",
    "title": "Setting up a Python Development Workstation (Windows)",
    "section": "",
    "text": "Welcome, fellow data enthusiasts and future quants! Today, we embark on an exciting journey to set up a coding environment that bridges the gap between mathematical theory and the practical world of finance. Whether you’re a student stepping into the field or a practitioner eager to enhance your skills, this guide is your first step towards mastering quantitative finance with Python. Let’s demystify the process and make it enjoyable together."
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#general-setup",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#general-setup",
    "title": "Setting up a Python Development Workstation (Windows)",
    "section": "1 General Setup",
    "text": "1 General Setup\n\n1.1 Setting Up Chocolatey\nOpen an administrator PowerShell and execute:\nSet-ExecutionPolicy Bypass -Scope Process -Force; \n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \niwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex\n\n\n1.2 Setting Up Powershell, Visual Studio Code, and Miniconda\nWhy this trio? Powershell for a superior shell experience, Visual Studio Code (VS Code) for its versatility as a code editor, and Miniconda for managing our Python environments efficiently.\n# Install Zsh, VS Code, and Miniconda\n\nchoco install vscode miniconda3 -y\nTo setup the conda integration for Powershell, once a powershell windows is opened, you can type conda init, this will enable an easier monitoring of the virtual environment."
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#visual-studio-code-setup-installing-key-visual-studio-extensions",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#visual-studio-code-setup-installing-key-visual-studio-extensions",
    "title": "Setting up a Python Development Workstation (Windows)",
    "section": "2. Visual Studio Code Setup: Installing Key Visual Studio Extensions",
    "text": "2. Visual Studio Code Setup: Installing Key Visual Studio Extensions\nVS Code shines with its extensions. Here are a few that will make your life easier:\n\nPython: Gives you a host of Python-specific features like linting, debugging, code formatting, and more.\nPrettier: A code formatter that supports many languages, including Python. Keeps your code clean and professional.\nCode Spell Checker: Like a proof-reader, it catches common spelling mistakes in your code.\n\nYou can install these extensions by searching for them in the VS Code Extensions view (Ctrl + Shift + X) and clicking on “Install”."
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#create-a-conda-virtual-environment",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#create-a-conda-virtual-environment",
    "title": "Setting up a Python Development Workstation (Windows)",
    "section": "3: Create a Conda Virtual Environment",
    "text": "3: Create a Conda Virtual Environment\nWhy a virtual environment? It allows us to create isolated spaces for our projects, ensuring that our dependencies are managed neatly, without conflicts.\n# Create the virtual environment\nconda create --name portfolio-geek python=3.12 jupyterlab -y\n\n# Activate the environment\nconda activate portfolio-geek\n\npip install matplotlib"
  },
  {
    "objectID": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#step-4-building-a-simple-matplotlib-chart-in-visual-studio",
    "href": "posts/tutorials/en/setting-up-a-python-workstation-windows.html#step-4-building-a-simple-matplotlib-chart-in-visual-studio",
    "title": "Setting up a Python Development Workstation (Windows)",
    "section": "Step 4: Building a Simple Matplotlib Chart in Visual Studio",
    "text": "Step 4: Building a Simple Matplotlib Chart in Visual Studio\nWe need to start somewhere! Let’s create a Notebook file (extension .ipynb) within Visual Studio and let’s type the following code.\n\n\nCode\n# Ensure you're in the 'portfolio-geek' environment\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plotting\nplt.plot(x, y)\nplt.title(\"Simple Sine Wave Plot\")\nplt.xlabel(\"X axis\")\nplt.ylabel(\"Y axis\")\nplt.show()\n\n\n\n\n\n\n\n\n\nEt Voila! The first chart in our journey to Python coding.\n\nRecap and Conclusion\nCongratulations! You’ve set up a robust coding environment for your journey into quantitative finance and data analysis. Today, we’ve installed essential tools with Chocolatey, created an isolated workspace with Conda, and dipped our toes into the world of data visualization with Matplotlib.\nWhy is this important? This setup not only equips you with the technical skills needed in the field but also instills confidence to explore complex financial models and datasets.\nAs we progress, remember that the journey is as rewarding as the destination. Keep experimenting, and don’t hesitate to dive deeper into each tool and library we discussed.\n\n\nFurther Reading and Resources\n\nBooks:\n\n“Python for Finance” by Yves Hilpisch\n“Python for Data Analysis” by Wes McKinney\n\nWebsites:\n\nOfficial Python Documentation\nMatplotlib Tutorials\n\nAwesome Python GitHub Repositories:\n\nAwesome Quant\nQuantLib\n\n\nThis structure offers a blend of instructional content and hands-on coding, making it accessible for beginners while providing enough depth for more experienced learners. The tone is kept light and encouraging, aiming to demystify the complexities of setting up a quantitative finance coding environment."
  },
  {
    "objectID": "posts/tutorials/en/spy-and-matplotlib.html",
    "href": "posts/tutorials/en/spy-and-matplotlib.html",
    "title": "Getting and charting data with Matplotlib",
    "section": "",
    "text": "Welcome to the second episode of our Python and Quantitative Finance tutorial, where we will enter in our real Python journey.\nIn this first coding exercise, things will be very simple, we will essentially look at the past performance of a financial tool, an ETF. This ETF is called the SPY, it’s a US domiciled ETF that aims to replicate the performance of the S&P 500 Index1, one of the key indices to measure the performance of the US Equity market."
  },
  {
    "objectID": "posts/tutorials/en/spy-and-matplotlib.html#introduction",
    "href": "posts/tutorials/en/spy-and-matplotlib.html#introduction",
    "title": "Getting and charting data with Matplotlib",
    "section": "",
    "text": "Welcome to the second episode of our Python and Quantitative Finance tutorial, where we will enter in our real Python journey.\nIn this first coding exercise, things will be very simple, we will essentially look at the past performance of a financial tool, an ETF. This ETF is called the SPY, it’s a US domiciled ETF that aims to replicate the performance of the S&P 500 Index1, one of the key indices to measure the performance of the US Equity market."
  },
  {
    "objectID": "posts/tutorials/en/spy-and-matplotlib.html#import-libraries",
    "href": "posts/tutorials/en/spy-and-matplotlib.html#import-libraries",
    "title": "Getting and charting data with Matplotlib",
    "section": "Import Libraries",
    "text": "Import Libraries\nFirst, we import necessary libraries. yfinance will fetch the data, and matplotlib will help us chart it.\n\n\nCode\nimport yfinance as yf\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/tutorials/en/spy-and-matplotlib.html#footnotes",
    "href": "posts/tutorials/en/spy-and-matplotlib.html#footnotes",
    "title": "Getting and charting data with Matplotlib",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor more information on the S&P 500 Index, you can look at this Wikipedia article.↩︎\nFor more information on the pandas library, look at its reference website.↩︎"
  },
  {
    "objectID": "posts/daily-curation/2024-07-14_daily-curation.html",
    "href": "posts/daily-curation/2024-07-14_daily-curation.html",
    "title": "14 July 2024: Economics, Indexing, Quant and Coding Links",
    "section": "",
    "text": "Here are the findings of the day.\nHappy reading!\nVincent\n\nClimate\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nQ&A: How Denmark plans to tax agriculture emissions to meet climate goals\nCarbon Brief\nDenmark will implement a tax on agricultural emissions in 2030, aiming for significant CO2 reductions and supporting the livestock industry’s transition to greener practices, influencing global policies.\n\n\nBlackRock Launches Decarbonization Voting and Engagement Policy for Climate-Focused Funds - ESG Today\nESG Today\nBlackRock introduced “Climate and Decarbonization Stewardship Guidelines” to enhance voting and engagement for climate-focused funds, prioritizing low-carbon transition and demanding disclosure of emissions reduction targets from companies.\n\n\nOxford University climate survey shows majority want action\nOxford Mail\nA UNDP-Oxford survey shows 86% want stronger climate action, with 72% supporting a shift from fossil fuels, highlighting women’s greater advocacy for enhanced climate commitments.\n\n\nTemperatures 1.5C above pre-industrial era average for 12 months, data shows\nThe Guardian\nThe world has experienced 12 consecutive months of record-high temperatures, exceeding 1.5°C above pre-industrial levels, highlighting urgent climate change risks and the need for emission reductions.\n\n\nDeath Valley sets a new daily record with a searing 128 degrees as the unrelenting West Coast heat wave drags on\nCNN\nRecord-breaking heat continues across the US, with temperatures exceeding 100 degrees in many areas, increased wildfire risks, and heat alerts impacting millions from the West to the East Coast.\n\n\nCan we air condition our way out of extreme heat?\nThe Climate Brink\nAir conditioning is essential for survival amid climate change, but increasing costs disproportionately affect the poor, highlighting equity issues and the need for government support in adaptation efforts.\n\n\nThe growing carbon debt\nCarbon Brief\nThe growing carbon debt requires future generations to remove excess CO2, as emissions persist long-term, necessitating urgent action to minimize climate impact and reduce future burdens.\n\n\n\n\n\nMarket Pulse\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nEcb rate cuts lagarde poised for holiday may prime markets for september\nBloomberg\nEuropean Central Bank officials may signal an interest-rate cut, observing inflation pressures, while traders await insights from President Lagarde ahead of the September 12 meeting following a long summer break.\n\n\n\n\n\nTech\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nUK sweeps a third of European tech funding in 2024\nDealroom\nUK firms secured £7.4bn in tech funding, capturing 32% of Europe’s total, with significant growth in London and Cambridge, driven by investment in AI, fintech, and energy sectors.\n\n\nSix astuces pour de superbes photos de feux d’artifice avec votre smartphone\nLes Numériques\nSix conseils pour photographier des feux d’artifice avec un smartphone : repérage, stabilisation, bons réglages, applications, utiliser un retardateur et retoucher les images en postproduction.\n\n\nEmbedded Python: MicroPython Is Amazing\nHackaday\nMicroPython enhances project development with fast interactive coding, extensive libraries, and ease of use, making it ideal for debugging, prototyping, and implementing features on microcontrollers like ESP32 and RP2040.\n\n\n\n\n\nAutomation\n\n\n\nTitle\nSource\nSummary\n\n\n\n\n5 ChatGPT Prompts To Create 30 Pieces Of Content In 30 Minutes\nForbes\nUse five prompts with ChatGPT to quickly generate 30 pieces of engaging social media content by providing context, core ideas, examples, post formats, and edits.\n\n\n17 Mindblowing Python Automation Scripts I Use Everyday\nTowards Data Science\nThe author shares Python automation scripts that enhance productivity, including a script to convert PDF files into audio books using the PyPDF2 and pyttsx3 libraries.\n\n\n\n\n\nQuantitative Investing\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nStop using Moving Average to smooth your Time Series\nMedium\nTime series smoothing improves data analysis by reducing fluctuations. Moving averages lag and lose detail, while Savitzky-Golay retains important features, capturing seasonality without delay."
  },
  {
    "objectID": "posts/daily-curation/2024-07-20_daily-curation.html",
    "href": "posts/daily-curation/2024-07-20_daily-curation.html",
    "title": "Bitcoin’s Safe-Haven Status, GPT-4o Mini’s Launch, and Mastering AI Content: Today’s Key Insights",
    "section": "",
    "text": "In today’s curation, we explore a range of topics relevant to technology, fitness, and finance:\n\nOpenAI’s launch of GPT-4o mini, offering a cost-effective alternative to GPT-4o.\nGuidelines for creating effective content prompts for generative AI.\nThe benefits of hill repeats for enhancing cardiovascular fitness.\nBitcoin’s disconnection from the S&P 500 and its emerging status as a safe-haven asset.\n\n\nAI and Gen-AI\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nGPT-4o Mini Is a Cheaper, Almost as Good Version of GPT-4o\nOpenAI Blog\nOpenAI has launched GPT-4o mini, a cheaper alternative to GPT-4o, lacking audio/video processing. It offers similar performance and safety features but at significantly reduced pricing for developers.\n\n\n\n\n\nAutomation\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nHow to Level Up Your Content Prompts for Generative AI\nThe Content Strategist\nCreating effective content prompts for generative AI involves specificity, choosing the right tools, fact-checking, and navigating copyright issues. Clear guidelines help mitigate risks associated with AI-generated content.\n\n\n\n\n\nPersonal Developement\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nWhy You Should Be Running Hill Repeats (and How to Get Started)\nThe blog name is not explicitly mentioned in the provided content.\nHill repeats improve cardiovascular fitness and strength. They are low impact, enhance running form, and provide confidence. Use varied inclines and adjust reps as needed, even on flat terrain.\n\n\n\n\n\nPortfolio Construction Techniques\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nBitcoin Snaps Its Correlation with the S&P 500\nBloomberg\nBitcoin has broken its correlation with the S&P 500, rising despite market declines. Strong ETF inflows and strategic remarks about Bitcoin boost its potential as a safe-haven asset."
  },
  {
    "objectID": "posts/daily-curation/2024-07-18_daily-curation.html",
    "href": "posts/daily-curation/2024-07-18_daily-curation.html",
    "title": "18 July 2024: Automation, Quant and Tech in Focus",
    "section": "",
    "text": "Here are the findings of the day.\nHappy reading!\nVincent\n\nAutomation\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nSimple Linux Shell Scripts in Bash, Python, and Perl That Will Get You Up and Running\nLinux Journal\nBash, Python, and Perl are powerful Linux scripting languages for task automation, offering unique features like command integration, extensive libraries, and text processing capabilities for efficient system management.\n\n\n\n\n\nQuantitative Investing\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nDesigning Robust Trend-Following System - QuantPedia\nQuantpedia\nDobromir Tzotchev’s framework outlines a robust trend-following strategy emphasizing a clean signal, portfolio diversification, and effective risk management techniques for consistent returns in varying market conditions.\n\n\n\n\n\nTech\n\n\n\nTitle\nSource\nSummary\n\n\n\n\nHistory and Future of LLMs\nData Science Central\nLarge Language Models (LLMs) evolved from rule-based NLP to transformers, utilizing attention mechanisms and multimodal inputs, with advancements in hardware, algorithms, and smaller models to enhance efficiency and performance."
  },
  {
    "objectID": "daily-curation.html",
    "href": "daily-curation.html",
    "title": "Daily Findings",
    "section": "",
    "text": "Bitcoin’s Safe-Haven Status, GPT-4o Mini’s Launch, and Mastering AI Content: Today’s Key Insights\n\n\n\n\n\n\nVincent D.\n\n\nJul 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n19 July 2024: Daily selection of Quant, Finance and Coding links\n\n\n\n\n\n\nVincent D.\n\n\nJul 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n18 July 2024: Automation, Quant and Tech in Focus\n\n\n\n\n\n\nVincent D.\n\n\nJul 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n17 July 2024: Daily Curation with Asset Management, Coding and Economics in Focus\n\n\n\n\n\n\nVincent D.\n\n\nJul 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n16 July 2024: Asset Management, Economics and ETFs in Focus\n\n\n\n\n\n\nVincent D.\n\n\nJul 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15 July 2024: daily curation with Market, Tech and Quant Links\n\n\n\n\n\n\nVincent D.\n\n\nJul 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n14 July 2024: Economics, Indexing, Quant and Coding Links\n\n\n\n\n\n\nVincent D.\n\n\nJul 14, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive",
    "section": "",
    "text": "Setting up a Python Development Workstation (Windows)\n\n\n\n\n\nIn this article we set up our Windows workstation and install all the relevant tools to be efficient in coding in Python.\n\n\n\n\n\nFeb 22, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up a Python Development Workstation (MacOs)\n\n\n\n\n\nIn this article, we start our journey into Finance and Python coding. Let’s set up our MacOs Workstation and install a few key tools to code efficiently.\n\n\n\n\n\nFeb 20, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nGetting and charting data with Matplotlib\n\n\n\n\n\nIn this article, we start our data analysis journey with Python by getting and charting data, in this case the performance of an ETF using freely available data.\n\n\n\n\n\nJan 25, 2024\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nPortfolio optimisation with Python\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2023\n\n\nVincent D.\n\n\n\n\n\n\n\n\n\n\n\n\nVisualising Historical Data\n\n\n\n\n\n\n\n\n\n\n\nMar 3, 2023\n\n\nVincent D.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "With 20 years of experience in portfolio construction, asset allocation and quantitative research, I have worked across the asset management and capital markets industry’s value chain.\nIn my different roles, I have developed and deployed a wide range range of investment solutions, ranging from Exchange Traded Funds (ETFs), derivatives and investment mandates across most asset classes: Equities, Fixed Income, Commodities, Alternative Assets, Multi-Asset portfolios.\nFind me on Linkedin\n\nWhy this blog?\nWhat struck me the most when I started my career in finance was the knowledge asymetry between finance professionals and end clients. Whilst this gap has been considerably reduced since then, thanks to internet and better information provided, many concepts still sound fairly exotic or technical to many investors.\nHere, I will try to demystify financial analysis and provide ideas and starting points in order to put theory into practice.\nIn most articles, you should be able to copy, run and modify the code behind the analysis. This should help you to directly use many of the tools presented. The entire source is available on Github"
  },
  {
    "objectID": "tutorials_en.html",
    "href": "tutorials_en.html",
    "title": "Getting Started: Quantitative Finance with Python",
    "section": "",
    "text": "Getting and charting data with Matplotlib\n\n\nIn this article, we start our data analysis journey with Python by getting and charting data, in this case the performance of an ETF using freely available data.\n\n\n\nVincent D.\n\n\nJan 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up a Python Development Workstation (MacOs)\n\n\nIn this article, we start our journey into Finance and Python coding. Let’s set up our MacOs Workstation and install a few key tools to code efficiently.\n\n\n\nVincent D.\n\n\nFeb 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up a Python Development Workstation (Windows)\n\n\nIn this article we set up our Windows workstation and install all the relevant tools to be efficient in coding in Python.\n\n\n\nVincent D.\n\n\nFeb 22, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]